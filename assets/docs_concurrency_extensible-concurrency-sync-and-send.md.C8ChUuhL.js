import{_ as c,c as d,o,ag as n}from"./chunks/framework.CO45oJKY.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/concurrency/extensible-concurrency-sync-and-send.md","filePath":"docs/concurrency/extensible-concurrency-sync-and-send.md","lastUpdated":1754575581000}'),t={name:"docs/concurrency/extensible-concurrency-sync-and-send.md"};function a(r,e,s,l,S,i){return o(),d("div",null,e[0]||(e[0]=[n('<h2 id="使用send和sync特性的可扩展并发" tabindex="-1">使用<code>Send</code>和<code>Sync</code>特性的可扩展并发 <a class="header-anchor" href="#使用send和sync特性的可扩展并发" aria-label="Permalink to &quot;使用`Send`和`Sync`特性的可扩展并发&quot;">​</a></h2><p>有趣的是，到目前为止我们在本章中讨论的几乎所有并发特性都是标准库的一部分，而不是语言本身的一部分。处理并发的选项不仅限于语言或标准库；你可以编写自己的并发特性或使用其他人编写的并发特性。</p><p>然而，嵌入在语言中而不是标准库中的关键并发概念之一是<code>std::marker</code>特性<code>Send</code>和<code>Sync</code>。</p><h2 id="使用send允许线程间所有权转移" tabindex="-1">使用<code>Send</code>允许线程间所有权转移 <a class="header-anchor" href="#使用send允许线程间所有权转移" aria-label="Permalink to &quot;使用`Send`允许线程间所有权转移&quot;">​</a></h2><p><code>Send</code>标记特性表示实现<code>Send</code>的类型的值的所有权可以在线程之间转移。几乎所有的 Rust 类型都是 <code>Send</code>，但也有一些例外，包括<code>Rc&lt;T&gt;</code>：它不能实现<code>Send</code>，因为如果你克隆了一个<code>Rc&lt;T&gt;</code>值并尝试将克隆的所有权转移到另一个线程，两个线程可能会同时更新引用计数。因此，<code>Rc&lt;T&gt;</code>被实现为在单线程情况下使用，在这种情况下你不想付出线程安全的性能代价。</p><p>因此，Rust 的类型系统和特性约束确保你永远不会意外地不安全地跨线程发送<code>Rc&lt;T&gt;</code>值。当我们在示例 16-14 中尝试这样做时，我们得到了**the error the trait Send is not implemented for <code>Rc&lt;Mutex&lt;i32&gt;&gt;</code>**的错误。当我们切换到实现了<code>Send</code>的<code>Arc&lt;T&gt;</code>时，代码编译通过了。</p><p>完全由<code>Send</code>类型组成的任何类型也会自动标记为<code>Send</code>。几乎所有的原始类型都是<code>Send</code>，除了原始指针，我们将在第 20 章中讨论。</p><h2 id="使用sync允许多线程访问" tabindex="-1">使用<code>Sync</code>允许多线程访问 <a class="header-anchor" href="#使用sync允许多线程访问" aria-label="Permalink to &quot;使用`Sync`允许多线程访问&quot;">​</a></h2><p><code>Sync</code>标记特性表示实现<code>Sync</code>的类型可以安全地从多个线程引用。换句话说，任何类型<code>T</code>如果<code>&amp;T</code>（对<code>T</code>的不可变引用）实现了<code>Send</code>，那么它就实现了<code>Sync</code>，这意味着引用可以安全地发送到另一个线程。与<code>Send</code>类似，所有原始类型都实现了<code>Sync</code>，完全由实现<code>Sync</code>的类型组成的类型也实现了<code>Sync</code>。</p><p>智能指针<code>Rc&lt;T&gt;</code>也不实现<code>Sync</code>，原因与它不实现<code>Send</code>相同。<code>RefCell&lt;T&gt;</code>类型（我们在第 15 章中讨论过）和相关的<code>Cell&lt;T&gt;</code>类型家族不实现<code>Sync</code>。<code>RefCell&lt;T&gt;</code>在运行时进行的借用检查实现不是线程安全的。智能指针<code>Mutex&lt;T&gt;</code>实现了<code>Sync</code>，可以用于在多个线程之间共享访问，正如你在<a href="https://doc.rust-lang.org/book/ch16-03-shared-state.html#sharing-a-mutext-between-multiple-threads" target="_blank" rel="noreferrer">&quot;在多个线程之间共享 <code>Mutex&lt;T&gt;</code>&quot;</a>中看到的那样。</p><h2 id="手动实现send和sync是不安全的" tabindex="-1">手动实现<code>Send</code>和<code>Sync</code>是不安全的 <a class="header-anchor" href="#手动实现send和sync是不安全的" aria-label="Permalink to &quot;手动实现`Send`和`Sync`是不安全的&quot;">​</a></h2><p>因为完全由实现<code>Send</code>和<code>Sync</code>特性的其他类型组成的类型也会自动实现<code>Send</code>和<code>Sync</code>，所以我们不必手动实现这些特性。作为标记特性，它们甚至没有任何方法需要实现。它们只是对于强制执行与并发相关的不变量很有用。</p><p>手动实现这些特性涉及实现不安全的 Rust 代码。我们将在第 20 章中讨论使用不安全的 Rust 代码；现在，重要的信息是构建不由<code>Send</code>和<code>Sync</code>部分组成的新并发类型需要仔细思考以维护安全保证。<a href="https://doc.rust-lang.org/nomicon/index.html" target="_blank" rel="noreferrer">&quot;The Rustonomicon&quot;</a>有关于这些保证以及如何维护它们的更多信息。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这不是你在本文档中最后一次看到并发：下一章重点讨论异步编程，第 21 章中的项目将在比这里讨论的小例子更现实的情况下使用本章中的概念。</p><p>如前所述，因为 Rust 处理并发的方式很少是语言的一部分，所以许多并发解决方案都是作为 crate 实现的。这些比标准库发展得更快，所以一定要在网上搜索当前最先进的 crate，以便在多线程情况下使用。</p><p>Rust 标准库提供了用于消息传递的通道和智能指针类型，如<code>Mutex&lt;T&gt;</code>和<code>Arc&lt;T&gt;</code>，它们可以安全地用于并发上下文。类型系统和借用检查器确保使用这些解决方案的代码不会最终出现数据竞争或无效引用。一旦你的代码编译通过，你可以放心，它将愉快地在多个线程上运行，而不会出现其他语言中常见的难以追踪的错误。并发编程不再是一个令人恐惧的概念：勇往直前，无所畏惧地让你的程序并发吧！</p>',17)]))}const h=c(t,[["render",a]]);export{u as __pageData,h as default};
