import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.CO45oJKY.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/appendix/appendix-d.md","filePath":"docs/appendix/appendix-d.md","lastUpdated":1754912302000}'),p={name:"docs/appendix/appendix-d.md"};function h(e,s,l,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h2 id="附录-d-实用开发工具" tabindex="-1">附录 D - 实用开发工具 <a class="header-anchor" href="#附录-d-实用开发工具" aria-label="Permalink to &quot;附录 D - 实用开发工具&quot;">​</a></h2><p>在本附录中，我们会讨论 Rust 项目提供的一些实用开发工具。我们将研究自动格式化、快速应用警告修复的方法、代码检查器以及与 IDE 的集成。</p><h2 id="使用-rustfmt-进行自动格式化" tabindex="-1">使用 <code>rustfmt</code> 进行自动格式化 <a class="header-anchor" href="#使用-rustfmt-进行自动格式化" aria-label="Permalink to &quot;使用 \`rustfmt\` 进行自动格式化&quot;">​</a></h2><p><code>rustfmt</code> 工具根据社区代码风格重新格式化你的代码。许多协作项目使用 <code>rustfmt</code> 来防止在编写 Rust 代码时关于使用哪种风格的争论：每个人都使用该工具格式化他们的代码。</p><p>Rust 安装默认包含 <code>rustfmt</code>，所以你的系统上应该已经有了程序 <code>rustfmt</code> 和 <code>cargo-fmt</code>。这两个命令类似于 <code>rustc</code> 和 <code>cargo</code>，其中 <code>rustfmt</code> 允许更细粒度的控制，而 <code>cargo-fmt</code> 理解使用 Cargo 的项目的约定。要格式化任何 Cargo 项目，请输入以下内容：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cargo fmt</span></span></code></pre></div><p>运行此命令会重新格式化当前 <code>crate</code> 中的所有 Rust 代码。这应该只改变代码风格，而不是代码语义。</p><p>此命令为你提供 <code>rustfmt</code> 和 <code>cargo-fmt</code>，类似于 Rust 为你提供 <code>rustc</code> 和 <code>cargo</code>。要格式化任何 Cargo 项目，请输入以下内容：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cargo fmt</span></span></code></pre></div><p>运行此命令会重新格式化当前 <code>crate</code> 中的所有 Rust 代码。这应该只改变代码风格，而不是代码语义。有关 <code>rustfmt</code> 的更多信息，请参阅<a href="https://github.com/rust-lang/rustfmt" target="_blank" rel="noreferrer">其文档</a>。</p><h2 id="使用-rustfix-修复你的代码" tabindex="-1">使用 <code>rustfix</code> 修复你的代码 <a class="header-anchor" href="#使用-rustfix-修复你的代码" aria-label="Permalink to &quot;使用 \`rustfix\` 修复你的代码&quot;">​</a></h2><p><code>rustfix</code> 工具包含在 Rust 安装中，可以自动修复具有明确纠正问题方法的编译器警告，这很可能是你想要的。你之前很可能见过编译器警告。例如，考虑这段代码：</p><p>文件名：src/main.rs：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{x}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这里，我们将变量 <code>x</code> 定义为可变的，但我们从未真正改变它。Rust 会对此发出警告：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cargo build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Compiling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myprogram v0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///projects/myprogram)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">warning</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> variable does not need to be mutable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         ----^</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         help</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remove this \`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> note</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`#[warn(unused_mut)]\` on by default</span></span></code></pre></div><p>警告建议我们删除 <code>mut</code> 关键字。我们可以通过运行命令 <code>cargo fix</code> 使用 <code>rustfix</code> 工具自动应用该建议：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cargo fix</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Checking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myprogram v0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///projects/myprogram)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Fixing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rs (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fix)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Finished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev [unoptimized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> debuginfo] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">59s</span></span></code></pre></div><p>当我们再次查看 <em>src/main.rs</em> 时，我们会看到 <code>cargo fix</code> 已经更改了代码：</p><p>文件名：src/main.rs：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{x}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>x</code> 变量现在是不可变的，警告不再出现。</p><p>你还可以使用 <code>cargo fix</code> 命令在不同的 Rust 版本之间转换你的代码。版本在<a href="./appendix-e.html">附录 E</a>中有介绍。</p><h2 id="使用-clippy-进行更多代码检查" tabindex="-1">使用 Clippy 进行更多代码检查 <a class="header-anchor" href="#使用-clippy-进行更多代码检查" aria-label="Permalink to &quot;使用 Clippy 进行更多代码检查&quot;">​</a></h2><p>Clippy 工具是一个代码检查集合，用于分析你的代码，以便你可以捕获常见错误并改进你的 Rust 代码。Clippy 包含在标准 Rust 安装中。</p><p>要在任何 Cargo 项目上运行 Clippy 的代码检查，请输入以下内容：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cargo clippy</span></span></code></pre></div><p>例如，假设你编写了一个使用数学常数近似值的程序，比如 pi，就像这个程序所做的那样：</p><p>文件名：src/main.rs：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.1415</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;the area of the circle is {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此项目上运行 <code>cargo clippy</code> 会导致此错误：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>error: approximate value of \`f{32, 64}::consts::PI\` found</span></span>
<span class="line"><span> --&gt; src/main.rs:2:13</span></span>
<span class="line"><span>  |</span></span>
<span class="line"><span>2 |     let x = 3.1415;</span></span>
<span class="line"><span>  |             ^^^^^^</span></span>
<span class="line"><span>  |</span></span>
<span class="line"><span>  = note: \`#[deny(clippy::approx_constant)]\` on by default</span></span>
<span class="line"><span>  = help: consider using the constant directly</span></span>
<span class="line"><span>  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant</span></span></code></pre></div><p>此错误让你知道 Rust 已经定义了更精确的 <code>PI</code> 常数，如果你使用该常数，你的程序会更正确。然后你会更改你的代码以使用 <code>PI</code> 常数。以下代码不会从 Clippy 产生任何错误或警告：</p><p>文件名：src/main.rs：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;the area of the circle is {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有关 Clippy 的更多信息，请参阅<a href="https://github.com/rust-lang/rust-clippy" target="_blank" rel="noreferrer">其文档</a>。</p><h2 id="使用-rust-analyzer-进行-ide-集成" tabindex="-1">使用 <code>rust-analyzer</code> 进行 IDE 集成 <a class="header-anchor" href="#使用-rust-analyzer-进行-ide-集成" aria-label="Permalink to &quot;使用 \`rust-analyzer\` 进行 IDE 集成&quot;">​</a></h2><p>为了帮助 IDE 集成，Rust 社区推荐使用 <a href="https://rust-analyzer.github.io" target="_blank" rel="noreferrer"><code>rust-analyzer</code></a>。此工具是一套以编译器为中心的实用程序，它使用<a href="http://langserver.org/" target="_blank" rel="noreferrer">语言服务器协议</a>，这是 IDE 和编程语言之间相互通信的规范。不同的客户端可以使用 <code>rust-analyzer</code>，比如 <a href="https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer" target="_blank" rel="noreferrer">Visual Studio Code 的 Rust analyzer 插件</a>。</p><p>访问 <code>rust-analyzer</code> 项目的<a href="https://rust-analyzer.github.io/" target="_blank" rel="noreferrer">主页</a>获取安装说明，然后在你的特定 IDE 中安装语言服务器支持。你的 IDE 将获得诸如自动完成、跳转到定义和内联错误等功能。</p>`,39)]))}const o=i(p,[["render",h]]);export{g as __pageData,o as default};
