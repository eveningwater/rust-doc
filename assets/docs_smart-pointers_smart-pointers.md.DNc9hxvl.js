import{_ as t,c as o,o as c,ag as d}from"./chunks/framework.CO45oJKY.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/smart-pointers/smart-pointers.md","filePath":"docs/smart-pointers/smart-pointers.md","lastUpdated":1754642071000}'),r={name:"docs/smart-pointers/smart-pointers.md"};function a(s,e,p,i,l,n){return c(),o("div",null,e[0]||(e[0]=[d('<h2 id="智能指针" tabindex="-1">智能指针 <a class="header-anchor" href="#智能指针" aria-label="Permalink to &quot;智能指针&quot;">​</a></h2><p>指针是一个通用概念，指的是包含内存地址的变量。这个地址引用或&quot;指向&quot;其他数据。Rust 中最常见的指针类型是引用，你在第 4 章中已经学习过。引用由 <code>&amp;</code> 符号表示，并借用它们所指向的值。除了引用数据外，它们没有任何特殊功能，也没有额外开销。</p><p>另一方面，智能指针是一种数据结构，它们像指针一样工作，但还具有额外的元数据和功能。智能指针的概念并不是 Rust 独有的：智能指针起源于 C++，在其他语言中也存在。Rust 标准库中定义了多种智能指针，它们提供了超出引用所能提供的功能。为了探索这个一般概念，我们将看几个不同的智能指针例子，包括一种引用计数智能指针类型。这种指针通过跟踪所有者数量，使数据能够拥有多个所有者，并在没有所有者时清理数据。</p><p>Rust 凭借其所有权和借用概念，在引用和智能指针之间有一个额外的区别：虽然引用只借用数据，但在许多情况下，智能指针拥有它们所指向的数据。</p><p>虽然当时我们没有这样称呼它们，但我们在本文档中已经遇到了几个智能指针，包括第 8 章中的 <code>String</code> 和 <code>Vec&lt;T&gt;</code>。这两种类型都算作智能指针，因为它们拥有一些内存并允许你操作它。它们还具有元数据和额外的功能或保证。例如，<code>String</code> 将其容量存储为元数据，并具有确保其数据始终是有效 UTF-8 的额外能力。</p><p>智能指针通常使用结构体实现。与普通结构体不同，智能指针实现了 <code>Deref</code> 和 <code>Drop</code> 特性。<code>Deref</code> 特性允许智能指针结构体的实例表现得像引用一样，这样你就可以编写代码来处理引用或智能指针。<code>Drop</code> 特性允许你自定义当智能指针实例超出作用域时运行的代码。在本章中，我们将讨论这两个特性，并演示为什么它们对智能指针很重要。</p><p>鉴于智能指针模式是 Rust 中经常使用的一种通用设计模式，本章不会涵盖所有现有的智能指针。许多库都有自己的智能指针，你甚至可以编写自己的。我们将介绍标准库中最常见的智能指针：</p><ul><li><code>Box&lt;T&gt;</code>，用于在堆上分配值</li><li><code>Rc&lt;T&gt;</code>，一种启用多重所有权的引用计数类型</li><li><code>Ref&lt;T&gt;</code> 和 <code>RefMut&lt;T&gt;</code>，通过 <code>RefCell&lt;T&gt;</code> 访问，这是一种在运行时而不是编译时强制执行借用规则的类型</li></ul><p>此外，我们还将介绍内部可变性模式，其中不可变类型暴露用于修改内部值的 API。我们还将讨论引用循环：它们如何导致内存泄漏以及如何防止它们。</p><p>让我们开始吧！</p>',10)]))}const u=t(r,[["render",a]]);export{m as __pageData,u as default};
