import{_ as t,c as e,o,ag as c}from"./chunks/framework.CO45oJKY.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/appendix/appendix-b.md","filePath":"docs/appendix/appendix-b.md","lastUpdated":1756882795000}'),r={name:"docs/appendix/appendix-b.md"};function a(p,d,n,i,x,l){return o(),e("div",null,d[0]||(d[0]=[c('<h2 id="附录-b-运算符和符号" tabindex="-1">附录 B：运算符和符号 <a class="header-anchor" href="#附录-b-运算符和符号" aria-label="Permalink to &quot;附录 B：运算符和符号&quot;">​</a></h2><p>本附录包含 Rust 语法的词汇表，包括运算符和其他符号，这些符号可以单独出现或在路径、泛型、trait 约束、宏、属性、注释、元组和括号的上下文中出现。</p><h3 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h3><p>表 B-1 包含 Rust 中的运算符，每个运算符在上下文中的使用示例，简短解释，以及该运算符是否可重载。如果运算符可重载，会列出用于重载该运算符的相关 trait。</p><p><span class="caption">表 B-1：运算符</span></p><table tabindex="0"><thead><tr><th>运算符</th><th>示例</th><th>解释</th><th>是否可重载？</th></tr></thead><tbody><tr><td><code>!</code></td><td><code>ident!(...)</code>, <code>ident!{...}</code>, <code>ident![...]</code></td><td>宏展开</td><td></td></tr><tr><td><code>!</code></td><td><code>!expr</code></td><td>按位或逻辑补码</td><td><code>Not</code></td></tr><tr><td><code>!=</code></td><td><code>expr != expr</code></td><td>不等比较</td><td><code>PartialEq</code></td></tr><tr><td><code>%</code></td><td><code>expr % expr</code></td><td>算术取余</td><td><code>Rem</code></td></tr><tr><td><code>%=</code></td><td><code>var %= expr</code></td><td>算术取余并赋值</td><td><code>RemAssign</code></td></tr><tr><td><code>&amp;</code></td><td><code>&amp;expr</code>, <code>&amp;mut expr</code></td><td>借用</td><td></td></tr><tr><td><code>&amp;</code></td><td><code>&amp;type</code>, <code>&amp;mut type</code>, <code>&amp;&#39;a type</code>, <code>&amp;&#39;a mut type</code></td><td>借用指针类型</td><td></td></tr><tr><td><code>&amp;</code></td><td><code>expr &amp; expr</code></td><td>按位与</td><td><code>BitAnd</code></td></tr><tr><td><code>&amp;=</code></td><td><code>var &amp;= expr</code></td><td>按位与并赋值</td><td><code>BitAndAssign</code></td></tr><tr><td><code>&amp;&amp;</code></td><td><code>expr &amp;&amp; expr</code></td><td>短路逻辑与</td><td></td></tr><tr><td><code>*</code></td><td><code>expr * expr</code></td><td>算术乘法</td><td><code>Mul</code></td></tr><tr><td><code>*=</code></td><td><code>var *= expr</code></td><td>算术乘法并赋值</td><td><code>MulAssign</code></td></tr><tr><td><code>*</code></td><td><code>*expr</code></td><td>解引用</td><td><code>Deref</code></td></tr><tr><td><code>*</code></td><td><code>*const type</code>, <code>*mut type</code></td><td>裸指针</td><td></td></tr><tr><td><code>+</code></td><td><code>trait + trait</code>, <code>&#39;a + trait</code></td><td>复合类型约束</td><td></td></tr><tr><td><code>+</code></td><td><code>expr + expr</code></td><td>算术加法</td><td><code>Add</code></td></tr><tr><td><code>+=</code></td><td><code>var += expr</code></td><td>算术加法并赋值</td><td><code>AddAssign</code></td></tr><tr><td><code>,</code></td><td><code>expr, expr</code></td><td>参数和元素分隔符</td><td></td></tr><tr><td><code>-</code></td><td><code>- expr</code></td><td>算术取负</td><td><code>Neg</code></td></tr><tr><td><code>-</code></td><td><code>expr - expr</code></td><td>算术减法</td><td><code>Sub</code></td></tr><tr><td><code>-=</code></td><td><code>var -= expr</code></td><td>算术减法并赋值</td><td><code>SubAssign</code></td></tr><tr><td><code>-&gt;</code></td><td><code>fn(...) -&gt; type</code>, <code>|...| -&gt; type</code></td><td>函数和闭包返回类型</td><td></td></tr><tr><td><code>.</code></td><td><code>expr.ident</code></td><td>字段访问</td><td></td></tr><tr><td><code>.</code></td><td><code>expr.ident(expr, ...)</code></td><td>方法调用</td><td></td></tr><tr><td><code>.</code></td><td><code>expr.0</code>, <code>expr.1</code>, 等等</td><td>元组索引</td><td></td></tr><tr><td><code>..</code></td><td><code>..</code>, <code>expr..</code>, <code>..expr</code>, <code>expr..expr</code></td><td>右开区间字面量</td><td><code>PartialOrd</code></td></tr><tr><td><code>..=</code></td><td><code>..=expr</code>, <code>expr..=expr</code></td><td>右闭区间字面量</td><td><code>PartialOrd</code></td></tr><tr><td><code>..</code></td><td><code>..expr</code></td><td>结构体字面量更新语法</td><td></td></tr><tr><td><code>..</code></td><td><code>variant(x, ..)</code>, <code>struct_type { x, .. }</code></td><td>&quot;以及其余&quot;模式绑定</td><td></td></tr><tr><td><code>...</code></td><td><code>expr...expr</code></td><td>(已弃用，请使用 <code>..=</code> 代替) 在模式中：闭区间模式</td><td></td></tr><tr><td><code>/</code></td><td><code>expr / expr</code></td><td>算术除法</td><td><code>Div</code></td></tr><tr><td><code>/=</code></td><td><code>var /= expr</code></td><td>算术除法并赋值</td><td><code>DivAssign</code></td></tr><tr><td><code>:</code></td><td><code>pat: type</code>, <code>ident: type</code></td><td>约束</td><td></td></tr><tr><td><code>:</code></td><td><code>ident: expr</code></td><td>结构体字段初始化器</td><td></td></tr><tr><td><code>:</code></td><td><code>&#39;a: loop {...}</code></td><td>循环标签</td><td></td></tr><tr><td><code>;</code></td><td><code>expr;</code></td><td>语句和项终止符</td><td></td></tr><tr><td><code>;</code></td><td><code>[...; len]</code></td><td>固定大小数组语法的一部分</td><td></td></tr><tr><td><code>&lt;&lt;</code></td><td><code>expr &lt;&lt; expr</code></td><td>左移</td><td><code>Shl</code></td></tr><tr><td><code>&lt;&lt;=</code></td><td><code>var &lt;&lt;= expr</code></td><td>左移并赋值</td><td><code>ShlAssign</code></td></tr><tr><td><code>&lt;</code></td><td><code>expr &lt; expr</code></td><td>小于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>&lt;=</code></td><td><code>expr &lt;= expr</code></td><td>小于等于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>=</code></td><td><code>var = expr</code>, <code>ident = type</code></td><td>赋值/等价</td><td></td></tr><tr><td><code>==</code></td><td><code>expr == expr</code></td><td>相等比较</td><td><code>PartialEq</code></td></tr><tr><td><code>=&gt;</code></td><td><code>pat =&gt; expr</code></td><td>match 分支语法的一部分</td><td></td></tr><tr><td><code>&gt;</code></td><td><code>expr &gt; expr</code></td><td>大于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>&gt;=</code></td><td><code>expr &gt;= expr</code></td><td>大于等于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>&gt;&gt;</code></td><td><code>expr &gt;&gt; expr</code></td><td>右移</td><td><code>Shr</code></td></tr><tr><td><code>&gt;&gt;=</code></td><td><code>var &gt;&gt;= expr</code></td><td>右移并赋值</td><td><code>ShrAssign</code></td></tr><tr><td><code>@</code></td><td><code>ident @ pat</code></td><td>模式绑定</td><td></td></tr><tr><td><code>^</code></td><td><code>expr ^ expr</code></td><td>按位异或</td><td><code>BitXor</code></td></tr><tr><td><code>^=</code></td><td><code>var ^= expr</code></td><td>按位异或并赋值</td><td><code>BitXorAssign</code></td></tr><tr><td><code>|</code></td><td><code>pat | pat</code></td><td>模式替代</td><td></td></tr><tr><td><code>|</code></td><td><code>expr | expr</code></td><td>按位或</td><td><code>BitOr</code></td></tr><tr><td><code>|=</code></td><td><code>var |= expr</code></td><td>按位或并赋值</td><td><code>BitOrAssign</code></td></tr><tr><td><code>||</code></td><td><code>expr || expr</code></td><td>短路逻辑或</td><td></td></tr><tr><td><code>?</code></td><td><code>expr?</code></td><td>错误传播</td><td></td></tr></tbody></table><h3 id="非运算符符号" tabindex="-1">非运算符符号 <a class="header-anchor" href="#非运算符符号" aria-label="Permalink to &quot;非运算符符号&quot;">​</a></h3><p>以下列表包含所有不作为运算符功能的符号；也就是说，它们不像函数或方法调用那样行为。</p><p>表 B-2 显示了单独出现并在各种位置有效的符号。</p><p><span class="caption">表 B-2：独立语法</span></p><table tabindex="0"><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>&#39;ident</code></td><td>命名生命周期或循环标签</td></tr><tr><td>紧跟在 <code>u8</code>、<code>i32</code>、<code>f64</code>、<code>usize</code> 等后面的数字</td><td>特定类型的数字字面量</td></tr><tr><td><code>&quot;...&quot;</code></td><td>字符串字面量</td></tr><tr><td><code>r&quot;...&quot;</code>, <code>r#&quot;...&quot;#</code>, <code>r##&quot;...&quot;##</code>, 等等</td><td>原始字符串字面量，不处理转义字符</td></tr><tr><td><code>b&quot;...&quot;</code></td><td>字节字符串字面量；构造字节数组而不是字符串</td></tr><tr><td><code>br&quot;...&quot;</code>, <code>br#&quot;...&quot;#</code>, <code>br##&quot;...&quot;##</code>, 等等</td><td>原始字节字符串字面量，原始和字节字符串字面量的组合</td></tr><tr><td><code>&#39;...&#39;</code></td><td>字符字面量</td></tr><tr><td><code>b&#39;...&#39;</code></td><td>ASCII 字节字面量</td></tr><tr><td><code>|...| expr</code></td><td>闭包</td></tr><tr><td><code>!</code></td><td>总是空的底部类型，用于发散函数</td></tr><tr><td><code>_</code></td><td>&quot;忽略&quot;模式绑定；也用于使整数字面量可读</td></tr></tbody></table><p>表 B-3 显示了在通过模块层次结构到项的路径上下文中出现的符号。</p><p><span class="caption">表 B-3：路径相关语法</span></p><table tabindex="0"><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>ident::ident</code></td><td>命名空间路径</td></tr><tr><td><code>::path</code></td><td>相对于外部预导入的路径，所有其他 crate 都在此根植（即，包含 crate 名称的显式绝对路径）</td></tr><tr><td><code>self::path</code></td><td>相对于当前模块的路径（即，显式相对路径）</td></tr><tr><td><code>super::path</code></td><td>相对于当前模块父级的路径</td></tr><tr><td><code>type::ident</code>, <code>&lt;type as trait&gt;::ident</code></td><td>关联常量、函数和类型</td></tr><tr><td><code>&lt;type&gt;::...</code></td><td>无法直接命名的类型的关联项（例如，<code>&lt;&amp;T&gt;::...</code>、<code>&lt;[T]&gt;::...</code> 等）</td></tr><tr><td><code>trait::method(...)</code></td><td>通过命名定义它的 trait 来消除方法调用的歧义</td></tr><tr><td><code>type::method(...)</code></td><td>通过命名为其定义方法的类型来消除方法调用的歧义</td></tr><tr><td><code>&lt;type as trait&gt;::method(...)</code></td><td>通过命名 trait 和类型来消除方法调用的歧义</td></tr></tbody></table><p>表 B-4 显示了在使用泛型类型参数的上下文中出现的符号。</p><p><span class="caption">表 B-4：泛型</span></p><table tabindex="0"><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>path&lt;...&gt;</code></td><td>在类型中指定泛型类型的参数（例如，<code>Vec&lt;u8&gt;</code>）</td></tr><tr><td><code>path::&lt;...&gt;</code>, <code>method::&lt;...&gt;</code></td><td>在表达式中指定泛型类型、函数或方法的参数；通常称为涡轮鱼（例如，<code>&quot;42&quot;.parse::&lt;i32&gt;()</code>）</td></tr><tr><td><code>fn ident&lt;...&gt; ...</code></td><td>定义泛型函数</td></tr><tr><td><code>struct ident&lt;...&gt; ...</code></td><td>定义泛型结构体</td></tr><tr><td><code>enum ident&lt;...&gt; ...</code></td><td>定义泛型枚举</td></tr><tr><td><code>impl&lt;...&gt; ...</code></td><td>定义泛型实现</td></tr><tr><td><code>for&lt;...&gt; type</code></td><td>高阶生命周期约束</td></tr><tr><td><code>type&lt;ident=type&gt;</code></td><td>一个或多个关联类型具有特定赋值的泛型类型（例如，<code>Iterator&lt;Item=T&gt;</code>）</td></tr></tbody></table><p>表 B-5 显示了在约束泛型类型参数与 trait 约束的上下文中出现的符号。</p><p><span class="caption">表 B-5：Trait 约束约束</span></p><table tabindex="0"><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>T: U</code></td><td>泛型参数 <code>T</code> 约束为实现 <code>U</code> 的类型</td></tr><tr><td><code>T: &#39;a</code></td><td>泛型类型 <code>T</code> 必须比生命周期 <code>&#39;a</code> 活得更久（意味着该类型不能传递性地包含任何生命周期短于 <code>&#39;a</code> 的引用）</td></tr><tr><td><code>T: &#39;static</code></td><td>泛型类型 <code>T</code> 不包含除 <code>&#39;static</code> 之外的借用引用</td></tr><tr><td><code>&#39;b: &#39;a</code></td><td>泛型生命周期 <code>&#39;b</code> 必须比生命周期 <code>&#39;a</code> 活得更久</td></tr><tr><td><code>T: ?Sized</code></td><td>允许泛型类型参数是动态大小类型</td></tr><tr><td><code>&#39;a + trait</code>, <code>trait + trait</code></td><td>复合类型约束</td></tr></tbody></table><p>表 B-6 显示了在调用或定义宏以及在项上指定属性的上下文中出现的符号。</p><p><span class="caption">表 B-6：宏和属性</span></p><table tabindex="0"><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>#[meta]</code></td><td>外部属性</td></tr><tr><td><code>#![meta]</code></td><td>内部属性</td></tr><tr><td><code>$ident</code></td><td>宏替换</td></tr><tr><td><code>$ident:kind</code></td><td>宏元变量</td></tr><tr><td><code>$(...)...</code></td><td>宏重复</td></tr><tr><td><code>ident!(...)</code>, <code>ident!{...}</code>, <code>ident![...]</code></td><td>宏调用</td></tr></tbody></table><p>表 B-7 显示了创建注释的符号。</p><p><span class="caption">表 B-7：注释</span></p><table tabindex="0"><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>//</code></td><td>行注释</td></tr><tr><td><code>//!</code></td><td>内部行文档注释</td></tr><tr><td><code>///</code></td><td>外部行文档注释</td></tr><tr><td><code>/*...*/</code></td><td>块注释</td></tr><tr><td><code>/*!...*/</code></td><td>内部块文档注释</td></tr><tr><td><code>/**...*/</code></td><td>外部块文档注释</td></tr></tbody></table><p>表 B-8 显示了使用括号的上下文。</p><p><span class="caption">表 B-8：括号</span></p><table tabindex="0"><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>()</code></td><td>空元组（又名单元），既是字面量又是类型</td></tr><tr><td><code>(expr)</code></td><td>括号表达式</td></tr><tr><td><code>(expr,)</code></td><td>单元素元组表达式</td></tr><tr><td><code>(type,)</code></td><td>单元素元组类型</td></tr><tr><td><code>(expr, ...)</code></td><td>元组表达式</td></tr><tr><td><code>(type, ...)</code></td><td>元组类型</td></tr><tr><td><code>expr(expr, ...)</code></td><td>函数调用表达式；也用于初始化元组 <code>struct</code> 和元组 <code>enum</code> 变体</td></tr></tbody></table><p>表 B-9 显示了使用花括号的上下文。</p><p><span class="caption">表 B-9：花括号</span></p><table tabindex="0"><thead><tr><th>上下文</th><th>解释</th></tr></thead><tbody><tr><td><code>{...}</code></td><td>块表达式</td></tr><tr><td><code>Type {...}</code></td><td>结构体字面量</td></tr></tbody></table><p>表 B-10 显示了使用方括号的上下文。</p><p><span class="caption">表 B-10：方括号</span></p><table tabindex="0"><thead><tr><th>上下文</th><th>解释</th></tr></thead><tbody><tr><td><code>[...]</code></td><td>数组字面量</td></tr><tr><td><code>[expr; len]</code></td><td>包含 <code>len</code> 个 <code>expr</code> 副本的数组字面量</td></tr><tr><td><code>[type; len]</code></td><td>包含 <code>len</code> 个 <code>type</code> 实例的数组类型</td></tr><tr><td><code>expr[expr]</code></td><td>集合索引。可重载（<code>Index</code>、<code>IndexMut</code>）</td></tr><tr><td><code>expr[..]</code>, <code>expr[a..]</code>, <code>expr[..b]</code>, <code>expr[a..b]</code></td><td>假装是集合切片的集合索引，使用 <code>Range</code>、<code>RangeFrom</code>、<code>RangeTo</code> 或 <code>RangeFull</code> 作为&quot;索引&quot;</td></tr></tbody></table>',35)]))}const b=t(r,[["render",a]]);export{h as __pageData,b as default};
