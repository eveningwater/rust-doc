import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.CO45oJKY.js";const l="/rust-doc/assets/hello-world-1.a-uH5DYF.png",n="/rust-doc/assets/hello-world-error-1.DVId9tgQ.png",p="/rust-doc/assets/vs-install.CwClFxaC.png",h="/rust-doc/assets/hello-world-2.B9f2TMpr.png",d="/rust-doc/assets/hello-world-3.13Hf95yb.png",o="/rust-doc/assets/ls.BamRqDht.png",r="/rust-doc/assets/dir.2TTPZXKh.png",k="/rust-doc/assets/compile-file.DlfX7TD1.png",v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/getting-started/hello-world.md","filePath":"docs/getting-started/hello-world.md","lastUpdated":1754642071000}'),c={name:"docs/getting-started/hello-world.md"};function g(E,s,u,y,m,b){return e(),a("div",null,s[0]||(s[0]=[t(`<h2 id="hello-world" tabindex="-1">hello,world <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;hello,world&quot;">​</a></h2><p>现在你已经安装了 Rust，让我们编写第一个 Rust 程序。 在学习一种新语言时编写一个小的程序以打印文本“ Hello，world！”到屏幕上，是一种传统。所以我们在这里做同样的事情！</p><blockquote><p>注意：本文档假定你基本熟悉命令行。Rust 对你的编辑或工具或代码所在的位置没有特殊要求，因此，如果你更喜欢使用集成开发环境（IDE）而不是命令行，请随时使用自己喜欢的 IDE。现在，许多 IDE 都提供了一定程度的 Rust 支持。有关详细信息，请查看 IDE 的文档。 最近，Rust 团队一直致力于实现出色的 IDE 支持，并且在这方面已经取得了迅速的进步！</p></blockquote><h2 id="创建项目目录" tabindex="-1">创建项目目录 <a class="header-anchor" href="#创建项目目录" aria-label="Permalink to &quot;创建项目目录&quot;">​</a></h2><p>首先，创建一个目录来存储你的 Rust 代码。 对于 Rust 来说，你的代码位于哪里并不重要，但是对于本文档中的练习和项目，我们建议在你的主目录中创建一个<code>projects</code>目录，并将所有项目保存在该目录中。</p><p>打开终端，输入以下命令以创建项目目录和在项目目录中的项目“ Hello，world！”目录。</p><p>对于 Windows 上的 PowerShell，Linux 和 macOS，请输入以下命令：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ mkdir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projects</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ cd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projects</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ mkdir hello_world</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ cd hello_world</span></span></code></pre></div><p>对于 Windows CMD，请输入以下命令:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mkdir </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%USERPROFILE%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rojects&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%USERPROFILE%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rojects&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mkdir hello_world</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cd hello_world</span></span></code></pre></div><p>如下图所示:</p><p><img src="`+l+`" alt="hello,word"></p><h2 id="编写和运行一个-rust-运行程序" tabindex="-1">编写和运行一个 Rust 运行程序 <a class="header-anchor" href="#编写和运行一个-rust-运行程序" aria-label="Permalink to &quot;编写和运行一个 Rust 运行程序&quot;">​</a></h2><p>接下来，创建一个新的源文件并将其命名为<code>main.rs</code>。Rust 文件始终以<code>.rs</code>扩展名结尾。如果文件名中使用多个单词，请使用下划线将其分开。例如，使用<code>hello_world.rs</code>而不是<code>helloworld.rs</code>。</p><p>现在打开刚刚创建的<code>main.rs</code>文件，并第一行中输入代码。</p><p>文件名:main.rs:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello,world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>保存文件并返回到终端窗口。在 Linux 或 macOS 上，输入以下命令来编译和运行文件：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rustc main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ./</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span></span></code></pre></div><p>在 windows 上，输入命令<code>main.exe</code>代替<code>./main</code>：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; rustc main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exe</span></span></code></pre></div><p>如果运行提示如下错误，则代表我们未安装 Visual Studio 2019 安装构建工具,前往<a href="https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2019" target="_blank" rel="noreferrer">下载地址</a>下载安装。</p><p><img src="`+n+'" alt="错误"></p><p>下载了<code>Visual Studio.exe</code>文件之后，注意在选择界面的时候选择<code>C++</code>构建工具，当然如果不觉得麻烦，可以一键所有都选择下载安装，一键傻瓜式的安装，无非需要注意的就是如果不想将该软件安装在<code>C盘</code>，可以在如下界面时切换安装路径，如我安装在<code>D盘</code>的<code>myeditor/vs</code>目录。</p><p><img src="'+p+'" alt="vs"></p><p>点击安装，然后耐心等待安装完成。</p><blockquote><p>温馨提示：如果不会配置系统环境变量，最好不要将<code>vs</code>安装在其他盘，就默认安装在<code>C盘即可</code>，安装完成之后，再重新启动即可。</p></blockquote><p>现在我们再次定位到<code>hello,world</code>目录，输入命令<code>rustc main.rs</code>,如果当前目录为我们生成了如下图所示的文件，就表示编译成功。</p><p><img src="'+h+'" alt="编译成功"></p><p>接下来我们只要输入<code>./main.exe</code>，我们可以在<code>vscode</code>终端中运行该命令，即可看到打印出<code>hello,world</code>的信息，如下图所示:</p><p><img src="'+d+`" alt="print"></p><p>不管你的操作系统如何，字符串<code>Hello，world！</code>都应该打印到终端。如果看不到此输出，请参考<a href="./install.html">安装</a>部分的“故障排除”部分，以获取帮助。</p><p>如果<code>Hello，world！</code> 打印了，恭喜！ 你已经正式编写了 Rust 程序，这使你成为 Rust 程序员——欢迎你！</p><h2 id="剖析-rust-程序" tabindex="-1">剖析 Rust 程序 <a class="header-anchor" href="#剖析-rust-程序" aria-label="Permalink to &quot;剖析 Rust 程序&quot;">​</a></h2><p>让我们详细回顾一下<code>hello,world</code>程序中所发生的一切，这是第一个难题：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>这些代码定义了一个 Rust 函数。<code>main</code>函数比较特殊：它始终是每个可执行 Rust 程序中运行的第一个代码。第一行声明了一个名为 main 的函数，该函数没有任何参数，也没有任何返回值。如果有参数，它们将放在括号<code>()</code>中。</p><p>另外，请注意，函数体用大括号<code>{}</code>括起来。 Rust 的所有函数体中都需要<code>{}</code>。将开头的大括号放在函数声明的同一行上是很好的代码风格，然后在两者之间添加一个空格。</p><p><code>main</code>函数里紧跟着的是如下一行代码:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>此行完成了此小程序中的所有工作：它将文本输出到屏幕上。这里有四个要注意的重要细节。首先，Rust 风格是缩进四个空格，而不是<code>tab</code>制表符的空格。</p><p>第二，println! 调用 Rust<a href="https://baike.baidu.com/item/macro/10429400?fr=aladdin" target="_blank" rel="noreferrer">宏</a>。如果改为调用函数，则将其输入为 println（不带!）。我们将在第 19 章中更详细地讨论 Rust 宏。现在，你只需要知道使用!即可。表示你正在调用宏而不是普通函数。</p><p>第三，你看到的是<code>hello,world!</code>字符串。我们将此字符串作为参数传递给 println!，然后将该字符串打印到屏幕上。</p><p>第四，我们用分号（;）结束该行，这表明该表达式已结束，下一个表达式可以开始了。Rust 代码的大多数行以分号结尾。</p><h2 id="编译和运行是单独的步骤" tabindex="-1">编译和运行是单独的步骤 <a class="header-anchor" href="#编译和运行是单独的步骤" aria-label="Permalink to &quot;编译和运行是单独的步骤&quot;">​</a></h2><p>你刚刚运行了一个新创建的程序，因此让我们来理清一下该过程中的每个步骤。</p><p>在运行 Rust 程序之前，你必须使用 Rust 编译器通过输入<code>rustc</code>命令并向其传递源文件的名称来对其进行编译，如下所示：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rustc main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rs</span></span></code></pre></div><p>如果你具有 C 或 C++开发经验，则会注意到这类似于<a href="https://baike.baidu.com/item/gcc/17570?fr=aladdin" target="_blank" rel="noreferrer">gcc</a>或<a href="https://baike.baidu.com/item/clang/3698345?fr=aladdin" target="_blank" rel="noreferrer">clang</a>。 成功编译后，Rust 输出二进制可执行文件(<code>.exe</code>)。</p><p>在 Linux，macOS 和 Windows 上的 PowerShell 中，你可以通过在 Shell 中输入<code>ls</code>命令来查看可执行文件。 在 Linux 和 macOS 上，你会看到两个文件。使用 Windows 上的 PowerShell，你将看到与使用 CMD 时看到的相同的三个文件。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ ls</span></span>
<span class="line"><span>main  main.rs</span></span></code></pre></div><p>在 windows 的 CMD 中，你可以输入如下的命令:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; dir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> option says to only show the file names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exe</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pdb</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rs</span></span></code></pre></div><p>这里的<code>/B</code>指的就是文件名，比如你想要查看<code>main.rs</code>，输入<code>dir main.rs</code>。如下图所示:</p><p><img src="`+o+'" alt="ls"><img src="'+r+'" alt="dir"></p><p>这显示了带有<code>.rs</code>扩展名的源代码文件，可执行文件（在 Windows 上是<code>main.exe</code>，在所有其他平台上是<code>main</code>），以及在使用 Windows 时，包含一个带有<code>.pdb</code>扩展名的调试信息的文件。在这里，运行<code>main</code>或<code>main.exe</code>文件，如下所示：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ./</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main # or </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exe on </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windows</span></span></code></pre></div><p>如下图所示:</p><p><img src="'+k+'" alt="运行编译文件"></p><p>这意味着<code>./main</code>或者<code>./main.exe</code>命令都是可以正常运行的，相对而言，我比较倾向于前者（省略了后缀名）。如果 main.rs 是你的<code>hello,world</code>程序，此行将打印<code>hello,world!</code>到你的终端。</p><p>如果你对 Ruby，Python 或 JavaScript 等动态语言更加熟悉，则可能不习惯将它们作为单独的步骤来编译和运行程序。Rust 是一种提前编译的语言，这意味着你可以编译程序并将可执行文件提供给其他人，即使他们没有安装 Rust 也可以运行它。如果给某人一个.rb，.py 或.js 文件，则他们需要分别安装 Ruby，Python 或 JavaScript 实现。但是在这些语言中，你只需要一个命令即可编译和运行程序。一切都需要在语言设计中进行权衡。</p><p>对于简单的程序，仅使用<code>rustc</code>进行编译就可以了，但是随着项目的发展，你将需要管理所有选项并使其易于共享代码。接下来，我们将向你介绍<code>Cargo</code>工具，它将帮助你编写真实的 Rust 程序。</p>',62)]))}const C=i(c,[["render",g]]);export{v as __pageData,C as default};
