import{_ as a,c as e,o as s,ag as n}from"./chunks/framework.CO45oJKY.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/functional-features/functional-features.md","filePath":"docs/functional-features/functional-features.md","lastUpdated":1756883604000}'),o={name:"docs/functional-features/functional-features.md"};function l(r,t,i,u,c,f){return s(),e("div",null,t[0]||(t[0]=[n('<h2 id="函数式语言特性-迭代器与闭包" tabindex="-1">函数式语言特性：迭代器与闭包 <a class="header-anchor" href="#函数式语言特性-迭代器与闭包" aria-label="Permalink to &quot;函数式语言特性：迭代器与闭包&quot;">​</a></h2><p>Rust 的设计借鉴了许多现有语言和技术，其中一个重要的影响是函数式编程。函数式风格的编程通常包括将函数作为值来使用，例如将它们作为参数传递、从其他函数返回、赋值给变量以便稍后执行等等。</p><p>在本章中，我们不会争论什么是函数式编程或不是什么，而是讨论 Rust 中一些与许多通常被称为函数式语言的特性相似的特性。</p><p>更具体地说，我们将涵盖：</p><ul><li>闭包，一种可以存储在变量中的类似函数的构造</li><li>迭代器，一种处理一系列元素的方式</li><li>如何使用闭包和迭代器改进第 12 章中的 I/O 项目</li><li>闭包和迭代器的性能（剧透：它们可能比你想象的要快！）</li></ul><p>我们已经介绍了一些其他受函数式风格影响的 Rust 特性，例如模式匹配和枚举。由于掌握闭包和迭代器是编写惯用、快速的 Rust 代码的重要部分，我们将把整个章节专门讨论它们。</p>',6)]))}const d=a(o,[["render",l]]);export{p as __pageData,d as default};
