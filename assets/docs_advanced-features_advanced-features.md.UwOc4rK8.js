import{_ as a,c as t,o as n,ag as o}from"./chunks/framework.CO45oJKY.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/advanced-features/advanced-features.md","filePath":"docs/advanced-features/advanced-features.md","lastUpdated":1754642071000}'),s={name:"docs/advanced-features/advanced-features.md"};function r(d,e,i,u,c,l){return n(),t("div",null,e[0]||(e[0]=[o('<h2 id="advanced-features" tabindex="-1">Advanced Features <a class="header-anchor" href="#advanced-features" aria-label="Permalink to &quot;Advanced Features&quot;">​</a></h2><p>By now, you’ve learned the most commonly used parts of the Rust programming language. Before we do one more project in Chapter 21, we’ll look at a few aspects of the language you might run into every once in a while, but may not use every day. You can use this chapter as a reference for when you encounter any unknowns. The features covered here are useful in very specific situations. Although you might not reach for them often, we want to make sure you have a grasp of all the features Rust has to offer.</p><p>In this chapter, we’ll cover:</p><ul><li>Unsafe Rust: how to opt out of some of Rust’s guarantees and take responsibility for manually upholding those guarantees</li><li>Advanced traits: associated types, default type parameters, fully qualified syntax, supertraits, and the newtype pattern in relation to traits</li><li>Advanced types: more about the newtype pattern, type aliases, the never type, and dynamically sized types</li><li>Advanced functions and closures: function pointers and returning closures</li><li>Macros: ways to define code that defines more code at compile time</li></ul><p>It’s a panoply of Rust features with something for everyone! Let’s dive in!</p>',5)]))}const h=a(s,[["render",r]]);export{p as __pageData,h as default};
