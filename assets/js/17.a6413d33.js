(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{332:function(t,s,a){t.exports=a.p+"assets/img/trpl17-04.9fddeda4.svg"},333:function(t,s,a){t.exports=a.p+"assets/img/trpl17-05.65699be7.svg"},334:function(t,s,a){t.exports=a.p+"assets/img/trpl17-06.a37a9ca5.svg"},335:function(t,s,a){t.exports=a.p+"assets/img/trpl17-07.83e9765b.svg"},336:function(t,s,a){t.exports=a.p+"assets/img/trpl17-08.b39cc273.svg"},337:function(t,s,a){t.exports=a.p+"assets/img/trpl17-09.d40bbec0.svg"},411:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"深入了解异步特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入了解异步特性"}},[t._v("#")]),t._v(" 深入了解异步特性")]),t._v(" "),s("p",[t._v("在本章中，我们以各种方式使用了 "),s("code",[t._v("Future")]),t._v("、"),s("code",[t._v("Pin")]),t._v("、"),s("code",[t._v("Unpin")]),t._v("、"),s("code",[t._v("Stream")]),t._v(" 和 "),s("code",[t._v("StreamExt")]),t._v(" 特性。到目前为止，我们避免深入探讨它们的工作原理或如何协同工作，这在日常 Rust 工作中通常是没问题的。然而，有时你会遇到需要了解更多这些细节的情况。在本节中，我们将深入探讨足够多的细节来帮助你应对这些情况，同时将更深入的探讨留给其他文档。")]),t._v(" "),s("h3",{attrs:{id:"future-特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#future-特性"}},[t._v("#")]),t._v(" Future 特性")]),t._v(" "),s("p",[t._v("让我们先来仔细看看 "),s("code",[t._v("Future")]),t._v(" 特性是如何工作的。以下是 Rust 对它的定义：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#![allow(unused)]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("pin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Future")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Output")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pin")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[t._v("'_")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Poll")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Output")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这个特性定义包含了一堆新类型，以及一些我们以前没见过的语法，所以让我们逐一讲解这个定义。")]),t._v(" "),s("p",[t._v("首先，"),s("code",[t._v("Future")]),t._v(" 的关联类型 "),s("code",[t._v("Output")]),t._v(" 表示 "),s("code",[t._v("future")]),t._v(" 解析后的结果。这类似于 "),s("code",[t._v("Iterator")]),t._v(" 特性的 "),s("code",[t._v("Item")]),t._v(" 关联类型。其次，"),s("code",[t._v("Future")]),t._v(" 还有一个 "),s("code",[t._v("poll")]),t._v(" 方法，它接受一个特殊的 "),s("code",[t._v("Pin")]),t._v(" 引用作为其 "),s("code",[t._v("self")]),t._v(" 参数，以及一个 "),s("code",[t._v("Context")]),t._v(" 类型的可变引用，并返回一个 "),s("code",[t._v("Poll<Self::Output>")]),t._v("。我们稍后会详细讨论 "),s("code",[t._v("Pin")]),t._v(" 和 "),s("code",[t._v("Context")]),t._v("。现在，让我们关注该方法返回的 "),s("code",[t._v("Poll")]),t._v(" 类型：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#![allow(unused)]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Poll")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ready")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pending")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这个 "),s("code",[t._v("Poll")]),t._v(" 类型类似于 "),s("code",[t._v("Option")]),t._v("。它有一个包含值的变体 "),s("code",[t._v("Ready(T)")]),t._v("，以及一个不包含值的变体 "),s("code",[t._v("Pending")]),t._v("。然而，"),s("code",[t._v("Poll")]),t._v(" 的含义与 "),s("code",[t._v("Option")]),t._v(" 大不相同！"),s("code",[t._v("Pending")]),t._v(" 变体表示 "),s("code",[t._v("future")]),t._v(" 仍有工作要做，因此调用者需要稍后再次检查。"),s("code",[t._v("Ready")]),t._v(" 变体表示 "),s("code",[t._v("future")]),t._v(" 已完成其工作，并且 "),s("code",[t._v("T")]),t._v(" 值可用。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意：对于大多数 "),s("code",[t._v("future")]),t._v("，在 "),s("code",[t._v("future")]),t._v(" 返回 "),s("code",[t._v("Ready")]),t._v(" 后，调用者不应再次调用 "),s("code",[t._v("poll")]),t._v("。许多 "),s("code",[t._v("future")]),t._v(" 在变为 "),s("code",[t._v("Ready")]),t._v(" 后如果再次被 "),s("code",[t._v("poll")]),t._v("，将会 "),s("code",[t._v("panic")]),t._v("。可以安全地再次 "),s("code",[t._v("poll")]),t._v(" 的 "),s("code",[t._v("future")]),t._v(" 会在其文档中明确说明。这类似于 "),s("code",[t._v("Iterator::next")]),t._v(" 的行为。")])]),t._v(" "),s("p",[t._v("当你看到使用 "),s("code",[t._v("await")]),t._v(" 的代码时，Rust 会在底层将其编译为调用 "),s("code",[t._v("poll")]),t._v(" 的代码。如果你回顾示例 17-4，我们在其中打印了单个 URL 解析后的页面标题，Rust 会将其编译成类似（但不完全相同）这样的代码：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("page_title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ready")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("page_title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" page_title "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Some")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The title for {url} was {title}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("None")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{url} had no title"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pending")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// But what goes here?")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("当 "),s("code",[t._v("future")]),t._v(" 仍处于 "),s("code",[t._v("Pending")]),t._v(" 状态时，我们该怎么办？我们需要某种方式来一次又一次地尝试，直到 "),s("code",[t._v("future")]),t._v(" 最终准备就绪。换句话说，我们需要一个循环：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" page_title_fut "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("page_title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" page_title_fut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ready")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" page_title "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Some")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The title for {url} was {title}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("None")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{url} had no title"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pending")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// continue")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("然而，如果 Rust 将其编译成完全相同的代码，那么每个 "),s("code",[t._v("await")]),t._v(" 都将是阻塞的——这与我们想要达到的目标完全相反！相反，Rust 确保循环可以将控制权交给某个可以暂停此 "),s("code",[t._v("future")]),t._v(" 的工作以处理其他 "),s("code",[t._v("future")]),t._v("，然后稍后再次检查此 "),s("code",[t._v("future")]),t._v(" 的东西。正如我们所看到的，这个东西就是异步运行时，而这种调度和协调工作是其主要职责之一。")]),t._v(" "),s("p",[t._v("在本章前面，我们描述了等待 "),s("code",[t._v("rx.recv")]),t._v("。"),s("code",[t._v("recv")]),t._v(" 调用返回一个 "),s("code",[t._v("future")]),t._v("，并且 "),s("code",[t._v("await")]),t._v(" 该 "),s("code",[t._v("future")]),t._v(" 会对其进行 "),s("code",[t._v("poll")]),t._v("。我们注意到，运行时会暂停 "),s("code",[t._v("future")]),t._v("，直到通道关闭时它准备好 "),s("code",[t._v("Some(message)")]),t._v(" 或 "),s("code",[t._v("None")]),t._v("。通过我们对 "),s("code",[t._v("Future")]),t._v(" 特性，特别是 "),s("code",[t._v("Future::poll")]),t._v(" 的更深入理解，我们可以看到它是如何工作的。当 "),s("code",[t._v("future")]),t._v(" 返回 "),s("code",[t._v("Poll::Pending")]),t._v(" 时，运行时知道 "),s("code",[t._v("future")]),t._v(" 尚未准备好。相反，当 "),s("code",[t._v("poll")]),t._v(" 返回 "),s("code",[t._v("Poll::Ready(Some(message))")]),t._v(" 或 "),s("code",[t._v("Poll::Ready(None)")]),t._v(" 时，运行时知道 "),s("code",[t._v("future")]),t._v(" 已准备好并推进它。")]),t._v(" "),s("p",[t._v("运行时如何做到这一点的具体细节超出了本书的范围，但关键是了解 "),s("code",[t._v("future")]),t._v(" 的基本机制：运行时 "),s("code",[t._v("poll")]),t._v(" 它负责的每个 "),s("code",[t._v("future")]),t._v("，并在 "),s("code",[t._v("future")]),t._v(" 尚未准备好时将其重新置于休眠状态。")]),t._v(" "),s("h3",{attrs:{id:"pin-和-unpin-特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pin-和-unpin-特性"}},[t._v("#")]),t._v(" Pin 和 Unpin 特性")]),t._v(" "),s("p",[t._v("在 示例 17-16 中介绍 Pin 的概念时，我们遇到了一个非常棘手的错误消息。下面是它的相关部分：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E0277")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" `"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" block"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("` cannot be unpinned\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("48")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("48")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("trpl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join_all")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("futures"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                                 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" the "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" `"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Unpin")]),t._v("` is not implemented "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" `"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" block"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("`\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" note"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" consider using the `"),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("pin!")]),t._v("` "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("macro")]),t._v("\n           consider using `"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("pin` "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" you need to access the pinned value outside of the current scope\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" note"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" required "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" `"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" block"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("` to implement `"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),t._v("`\nnote"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" required by a bound "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" `"),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("futures_util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("future"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("join_all"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JoinAll")]),t._v("`\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//home/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.30/src/future/join_all.rs:29:8")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("JoinAll")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" required by a bound "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" this "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("28")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" required by this bound "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" `"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JoinAll")]),t._v("`\n")])])]),s("p",[t._v("这个错误消息不仅告诉我们需要固定值，还告诉我们为什么需要固定。"),s("code",[t._v("trpl::join_all")]),t._v(" 函数返回一个名为 "),s("code",[t._v("JoinAll")]),t._v(" 的结构体。该结构体是泛型类型 "),s("code",[t._v("F")]),t._v("，它被约束为实现 "),s("code",[t._v("Future")]),t._v(" 特性。直接使用 "),s("code",[t._v("await")]),t._v(" 等待 future 会隐式地固定 future。这就是为什么我们不需要在每次等待 future 时都使用 "),s("code",[t._v("pin!")]),t._v("。")]),t._v(" "),s("p",[t._v("然而，我们在这里并没有直接等待 future。相反，我们通过将 future 集合传递给 "),s("code",[t._v("join_all")]),t._v(" 函数来构造一个新的 future，即 "),s("code",[t._v("JoinAll")]),t._v("。"),s("code",[t._v("join_all")]),t._v(" 的签名要求集合中所有项的类型都实现 "),s("code",[t._v("Future")]),t._v(" 特性"),s("code",[t._v("Box<T>")]),t._v(" 仅当它包装的 "),s("code",[t._v("T")]),t._v(" 是实现 "),s("code",[t._v("Unpin")]),t._v(" 特性的 future 时才实现 "),s("code",[t._v("Future")]),t._v("。")]),t._v(" "),s("p",[t._v("这需要吸收很多信息！为了真正理解它，让我们进一步深入了解 "),s("code",[t._v("Future")]),t._v(" 特性的实际工作原理，特别是关于固定的部分。")]),t._v(" "),s("p",[t._v("再次查看 "),s("code",[t._v("Future")]),t._v(" 特性的定义：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#![allow(unused)]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("pin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Future")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Output")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Required method")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pin")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[t._v("'_")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Poll")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Output")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("cx 参数及其 Context 类型是运行时如何知道何时检查任何给定 Future 的关键，同时保持惰性。同样，其工作原理的细节超出了本章的范围，通常只有在编写自定义 Future 实现时才需要考虑这一点。我们将重点关注 self 的类型，因为这是我们第一次看到 self 带有类型注解的方法。self 的类型注解与其他函数参数的类型注解类似，但有两个关键区别：")]),t._v(" "),s("ul",[s("li",[t._v("它告诉 Rust "),s("code",[t._v("self")]),t._v(" 必须是什么类型才能调用该方法。")]),t._v(" "),s("li",[t._v("它不能是任何类型。它被限制为方法所实现的类型、对该类型的引用或智能指针，或者一个包装了对该类型引用的 "),s("code",[t._v("Pin")]),t._v("。")])]),t._v(" "),s("p",[t._v("我们将在第 18 章中看到更多关于这种语法的介绍。现在，只需知道如果我们要轮询一个 "),s("code",[t._v("future")]),t._v(" 以检查它是 "),s("code",[t._v("Pending")]),t._v(" 还是 "),s("code",[t._v("Ready(Output)")]),t._v("，我们需要一个 "),s("code",[t._v("Pin")]),t._v(" 包装的可变引用。")]),t._v(" "),s("p",[s("code",[t._v("Pin")]),t._v(" 是一个用于指针类型（如 "),s("code",[t._v("&")]),t._v("、"),s("code",[t._v("&mut")]),t._v("、"),s("code",[t._v("Box")]),t._v(" 和 "),s("code",[t._v("Rc")]),t._v("）的包装器。（从技术上讲，"),s("code",[t._v("Pin")]),t._v(" 适用于实现 "),s("code",[t._v("Deref")]),t._v(" 或 "),s("code",[t._v("DerefMut")]),t._v(" 特性的类型，但这实际上等同于只处理指针。）"),s("code",[t._v("Pin")]),t._v(" 本身不是指针，也没有像 "),s("code",[t._v("Rc")]),t._v(" 和 "),s("code",[t._v("Arc")]),t._v(" 那样具有引用计数等自己的行为；它纯粹是编译器可以用来强制执行指针使用约束的工具。")]),t._v(" "),s("p",[t._v("回想一下，"),s("code",[t._v("await")]),t._v(" 是通过调用 "),s("code",[t._v("poll")]),t._v(" 来实现的，这开始解释了我们之前看到的错误消息，但那是关于 "),s("code",[t._v("Unpin")]),t._v(" 而不是 "),s("code",[t._v("Pin")]),t._v(" 的。那么 "),s("code",[t._v("Pin")]),t._v(" 和 "),s("code",[t._v("Unpin")]),t._v(" 到底有什么关系，为什么 "),s("code",[t._v("Future")]),t._v(" 需要 "),s("code",[t._v("self")]),t._v(" 是 "),s("code",[t._v("Pin")]),t._v(" 类型才能调用 "),s("code",[t._v("poll")]),t._v(" 呢？")]),t._v(" "),s("p",[t._v("回想本章前面，"),s("code",[t._v("future")]),t._v(" 中的一系列 "),s("code",[t._v("await")]),t._v(" 点被编译成一个状态机，编译器确保该状态机遵循 Rust 所有关于安全性的正常规则，包括借用和所有权。为了实现这一点，Rust 会查看在一个 "),s("code",[t._v("await")]),t._v(" 点和下一个 "),s("code",[t._v("await")]),t._v(" 点或异步块结束之间需要哪些数据。然后，它会在编译后的状态机中创建一个相应的变体。每个变体都会获得它在源代码该部分中将使用的数据所需的访问权限，无论是通过获取该数据的所有权，还是通过获取对其的可变或不可变引用。")]),t._v(" "),s("p",[t._v("到目前为止，一切顺利：如果我们在给定的异步块中对所有权或引用有任何错误，借用检查器会告诉我们。当我们想要移动与该块对应的 "),s("code",[t._v("future")]),t._v(" 时——比如将其移动到 "),s("code",[t._v("Vec")]),t._v(" 中以传递给 "),s("code",[t._v("join_all")]),t._v("——事情就变得棘手了。")]),t._v(" "),s("p",[t._v("当我们移动一个 "),s("code",[t._v("future")]),t._v(" 时——无论是通过将其推入数据结构以与 "),s("code",[t._v("join_all")]),t._v(" 一起用作迭代器，还是通过从函数返回它——这实际上意味着移动 Rust 为我们创建的状态机。与 Rust 中的大多数其他类型不同，Rust 为异步块创建的 "),s("code",[t._v("future")]),t._v(" 最终可能会在任何给定变体的字段中包含对自身的引用，如 图 17-4 中的简化图所示。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(332),alt:""}})]),t._v(" "),s("p",[t._v("图 17-4：自引用数据类型。")]),t._v(" "),s("p",[t._v("然而，默认情况下，任何具有自引用的对象都是不安全的，因为引用总是指向它们所引用的实际内存地址（参见 图 17-5）。如果你移动数据结构本身，那些内部引用将指向旧位置。然而，该内存位置现在是无效的。一方面，当你更改数据结构时，它的值不会更新。另一方面——更重要的是——计算机现在可以自由地将该内存用于其他目的！你最终可能会在以后读取完全不相关的数据。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(333),alt:""}})]),t._v(" "),s("p",[t._v("图 17-5：移动自引用数据类型的不安全结果")]),t._v(" "),s("p",[t._v("理论上，Rust 编译器可以尝试在每次移动对象时更新其所有引用，但这可能会增加大量的性能开销，特别是当整个引用网络需要更新时。如果我们能确保相关数据结构在内存中不移动，我们就无需更新任何引用。这正是 Rust 的借用检查器所要求的：在安全代码中，它会阻止你移动任何具有活动引用的项。")]),t._v(" "),s("p",[s("code",[t._v("Pin")]),t._v(" 在此基础上为我们提供了我们需要的精确保证。当我们通过将指向该值的指针包装在 "),s("code",[t._v("Pin")]),t._v(" 中来固定一个值时，它就不能再移动了。因此，如果你有 "),s("code",[t._v("Pin<Box<SomeType>>")]),t._v("，你实际上固定的是 "),s("code",[t._v("SomeType")]),t._v(" 值，而不是 "),s("code",[t._v("Box")]),t._v(" 指针。图 17-6 说明了此过程。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(334),alt:""}})]),t._v(" "),s("p",[t._v("图 17-6：固定指向自引用 "),s("code",[t._v("future")]),t._v(" 类型的 "),s("code",[t._v("Box")]),t._v("。")]),t._v(" "),s("p",[t._v("实际上，"),s("code",[t._v("Box")]),t._v(" 指针仍然可以自由移动。请记住：我们关心的是确保最终被引用的数据保持在原位。如果指针移动，但它指向的数据在同一位置，如 图 17-7 所示，则没有潜在问题。作为一项独立练习，请查看这些类型的文档以及 "),s("code",[t._v("std::pin")]),t._v(" 模块，并尝试找出如何使用包装了 "),s("code",[t._v("Box")]),t._v(" 的 "),s("code",[t._v("Pin")]),t._v(" 来实现这一点。关键是自引用类型本身不能移动，因为它仍然被固定。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(335),alt:""}})]),t._v(" "),s("p",[t._v("图 17-7：移动指向自引用 "),s("code",[t._v("future")]),t._v(" 类型的 "),s("code",[t._v("Box")]),t._v("。")]),t._v(" "),s("p",[t._v("然而，大多数类型即使在 "),s("code",[t._v("Pin")]),t._v(" 包装器后面，也可以安全地移动。我们只需要在项目具有内部引用时考虑固定。数字和布尔值等基本类型是安全的，因为它们显然没有任何内部引用。Rust 中你通常使用的许多类型也没有。例如，你可以移动 "),s("code",[t._v("Vec")]),t._v("，而无需担心。根据我们目前所看到的情况，如果你有一个 "),s("code",[t._v("Pin<Vec<String>>")]),t._v("，你必须通过 "),s("code",[t._v("Pin")]),t._v(" 提供的安全但受限制的 API 来完成所有操作，即使 "),s("code",[t._v("Vec<String>")]),t._v(" 在没有其他引用的情况下总是可以安全移动的。我们需要一种方法来告诉编译器，在这种情况下移动项目是可以的——这就是 "),s("code",[t._v("Unpin")]),t._v(" 发挥作用的地方。")]),t._v(" "),s("p",[s("code",[t._v("Unpin")]),t._v(" 是一个标记特性，类似于我们在第 16 章中看到的 "),s("code",[t._v("Send")]),t._v(" 和 "),s("code",[t._v("Sync")]),t._v(" 特性，因此它本身没有功能。标记特性只用于告诉编译器，在特定上下文中安全地使用实现给定特性的类型。"),s("code",[t._v("Unpin")]),t._v(" 告知编译器，给定类型不需要保证所讨论的值是否可以安全移动。")]),t._v(" "),s("p",[t._v("与 "),s("code",[t._v("Send")]),t._v(" 和 "),s("code",[t._v("Sync")]),t._v(" 一样，编译器会自动为所有可以证明安全的类型实现 "),s("code",[t._v("Unpin")]),t._v("。一个特殊情况，同样类似于 "),s("code",[t._v("Send")]),t._v(" 和 "),s("code",[t._v("Sync")]),t._v("，是 "),s("code",[t._v("Unpin")]),t._v(" 未为某个类型实现的情况。其表示法是 "),s("code",[t._v("impl !Unpin for SomeType")]),t._v("，其中 "),s("code",[t._v("SomeType")]),t._v(" 是一个类型名称，它确实需要遵守这些保证，以便在 "),s("code",[t._v("Pin")]),t._v(" 中使用指向该类型的指针时是安全的。")]),t._v(" "),s("p",[t._v("换句话说，关于 "),s("code",[t._v("Pin")]),t._v(" 和 "),s("code",[t._v("Unpin")]),t._v(" 之间的关系，有两点需要记住。首先，"),s("code",[t._v("Unpin")]),t._v(" 是“正常”情况，而 "),s("code",[t._v("!Unpin")]),t._v(" 是特殊情况。其次，类型是否实现 "),s("code",[t._v("Unpin")]),t._v(" 或 "),s("code",[t._v("!Unpin")]),t._v(" 仅在你使用固定指针（如 "),s("code",[t._v("Pin<&mut SomeType>")]),t._v("）时才重要。")]),t._v(" "),s("p",[t._v("为了具体说明，考虑一个 "),s("code",[t._v("String")]),t._v("：它有一个长度和组成它的 Unicode 字符。我们可以将 "),s("code",[t._v("String")]),t._v(" 包装在 "),s("code",[t._v("Pin")]),t._v(" 中，如 图 17-8 所示。然而，"),s("code",[t._v("String")]),t._v(" 会自动实现 "),s("code",[t._v("Unpin")]),t._v("，Rust 中的大多数其他类型也是如此。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(336),alt:""}})]),t._v(" "),s("p",[t._v("图 17-8：固定 "),s("code",[t._v("String")]),t._v("；虚线表示 "),s("code",[t._v("String")]),t._v(" 实现了 "),s("code",[t._v("Unpin")]),t._v(" 特性，因此未被固定。")]),t._v(" "),s("p",[t._v("因此，我们可以做一些如果 "),s("code",[t._v("String")]),t._v(" 实现了 "),s("code",[t._v("!Unpin")]),t._v(" 就会非法的事情，例如在内存中的完全相同位置替换一个字符串，如 图 17-9 所示。这不违反 "),s("code",[t._v("Pin")]),t._v(" 契约，因为 "),s("code",[t._v("String")]),t._v(" 没有使其移动不安全的内部引用！这正是它实现 "),s("code",[t._v("Unpin")]),t._v(" 而不是 "),s("code",[t._v("!Unpin")]),t._v(" 的原因。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(337),alt:""}})]),t._v(" "),s("p",[t._v("图 17-9：在内存中用完全不同的 "),s("code",[t._v("String")]),t._v(" 替换 "),s("code",[t._v("String")]),t._v("。")]),t._v(" "),s("p",[t._v("现在我们已经足够了解，可以理解 示例 17-17 中 "),s("code",[t._v("join_all")]),t._v(" 调用报告的错误了。我们最初尝试将异步块生成的 "),s("code",[t._v("future")]),t._v(" 移动到 "),s("code",[t._v("Vec<Box<dyn Future<Output = ()>>>")]),t._v(" 中，但正如我们所见，这些 "),s("code",[t._v("future")]),t._v(" 可能具有内部引用，因此它们不实现 "),s("code",[t._v("Unpin")]),t._v("。它们需要被固定，然后我们可以将 "),s("code",[t._v("Pin")]),t._v(" 类型传递到 "),s("code",[t._v("Vec")]),t._v(" 中，确信 "),s("code",[t._v("future")]),t._v(" 中的底层数据不会被移动。")]),t._v(" "),s("p",[s("code",[t._v("Pin")]),t._v(" 和 "),s("code",[t._v("Unpin")]),t._v(" 主要对于构建底层库或构建运行时本身很重要，而不是日常 Rust 代码。但是，当你在错误消息中看到这些特性时，现在你将更好地了解如何修复代码！")]),t._v(" "),s("blockquote",[s("p",[t._v("注意："),s("code",[t._v("Pin")]),t._v(" 和 "),s("code",[t._v("Unpin")]),t._v(" 的这种组合使得在 Rust 中安全地实现一整类复杂的类型成为可能，否则这些类型会因为自引用而变得具有挑战性。需要 "),s("code",[t._v("Pin")]),t._v(" 的类型目前最常出现在异步 Rust 中，但偶尔你也会在其他上下文中看到它们。")]),t._v(" "),s("p",[s("code",[t._v("Pin")]),t._v(" 和 "),s("code",[t._v("Unpin")]),t._v(" 的具体工作方式以及它们需要遵守的规则在 "),s("code",[t._v("std::pin")]),t._v(" 的 API 文档中得到了广泛的介绍，因此如果你有兴趣了解更多信息，这是一个很好的起点。")]),t._v(" "),s("p",[t._v("如果你想更详细地了解内部工作原理，请参阅 "),s("a",{attrs:{href:"https://rust-lang.github.io/async-book/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rust 中的异步编程"),s("OutboundLink")],1),t._v(" 的第 2 章和第 4 章。")])]),t._v(" "),s("h3",{attrs:{id:"stream-特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stream-特性"}},[t._v("#")]),t._v(" Stream 特性")]),t._v(" "),s("p",[t._v("现在你对 "),s("code",[t._v("Future")]),t._v("、"),s("code",[t._v("Pin")]),t._v(" 和 "),s("code",[t._v("Unpin")]),t._v(" 特性有了更深入的理解，我们可以将注意力转向 "),s("code",[t._v("Stream")]),t._v(" 特性。正如你在本章前面所了解到的，流类似于异步迭代器。然而，与 "),s("code",[t._v("Iterator")]),t._v(" 和 "),s("code",[t._v("Future")]),t._v(" 不同，"),s("code",[t._v("Stream")]),t._v(" 在撰写本文时在标准库中没有定义，但 "),s("code",[t._v("futures")]),t._v(" crate 中有一个非常常见的定义，在整个生态系统中都有使用。")]),t._v(" "),s("p",[t._v("在查看 "),s("code",[t._v("Stream")]),t._v(" 特性如何将它们合并在一起之前，让我们回顾一下 "),s("code",[t._v("Iterator")]),t._v(" 和 "),s("code",[t._v("Future")]),t._v(" 特性的定义。从 "),s("code",[t._v("Iterator")]),t._v(" 中，我们有了序列的概念：它的 "),s("code",[t._v("next")]),t._v(" 方法提供了一个 "),s("code",[t._v("Option<Self::Item>")]),t._v("。从 "),s("code",[t._v("Future")]),t._v(" 中，我们有了随时间就绪的概念：它的 "),s("code",[t._v("poll")]),t._v(" 方法提供了一个 "),s("code",[t._v("Poll<Self::Output>")]),t._v("。为了表示随时间就绪的项序列，我们定义了一个将这些功能组合在一起的 "),s("code",[t._v("Stream")]),t._v(" 特性：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#![allow(unused)]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("pin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Stream")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Item")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("poll_next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pin")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            cx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[t._v("'_")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Poll")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Option")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("Stream")]),t._v(" 特性定义了一个名为 "),s("code",[t._v("Item")]),t._v(" 的关联类型，用于流生成的项的类型。这类似于 "),s("code",[t._v("Iterator")]),t._v("，其中可能存在零个到多个项，并且与 "),s("code",[t._v("Future")]),t._v(" 不同，"),s("code",[t._v("Future")]),t._v(" 总是只有一个 "),s("code",[t._v("Output")]),t._v("，即使它是单元类型 "),s("code",[t._v("()")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("Stream")]),t._v(" 还定义了一个获取这些项的方法。我们称之为 "),s("code",[t._v("poll_next")]),t._v("，以明确它以与 "),s("code",[t._v("Future::poll")]),t._v(" 相同的方式进行轮询，并以与 "),s("code",[t._v("Iterator::next")]),t._v(" 相同的方式生成项序列。它的返回类型结合了 "),s("code",[t._v("Poll")]),t._v(" 和 "),s("code",[t._v("Option")]),t._v("。外部类型是 "),s("code",[t._v("Poll")]),t._v("，因为它必须像 "),s("code",[t._v("future")]),t._v(" 一样检查就绪状态。内部类型是 "),s("code",[t._v("Option")]),t._v("，因为它需要像迭代器一样指示是否还有更多消息。")]),t._v(" "),s("p",[t._v("与此定义非常相似的内容很可能会成为 Rust 标准库的一部分。与此同时，它是大多数运行时工具包的一部分，因此你可以依赖它，我们接下来介绍的所有内容通常都适用！")]),t._v(" "),s("p",[t._v("然而，在我们流式处理部分看到的示例中，我们没有使用 "),s("code",[t._v("poll_next")]),t._v(" 或 "),s("code",[t._v("Stream")]),t._v("，而是使用了 "),s("code",[t._v("next")]),t._v(" 和 "),s("code",[t._v("StreamExt")]),t._v("。当然，我们可以通过手动编写自己的 "),s("code",[t._v("Stream")]),t._v(" 状态机来直接使用 "),s("code",[t._v("poll_next")]),t._v(" API，就像我们可以通过 "),s("code",[t._v("poll")]),t._v(" 方法直接使用 "),s("code",[t._v("future")]),t._v(" 一样。然而，使用 "),s("code",[t._v("await")]),t._v(" 要好得多，而 "),s("code",[t._v("StreamExt")]),t._v(" 特性提供了 "),s("code",[t._v("next")]),t._v(" 方法，这样我们就可以做到这一点：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#![allow(unused)]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("pin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Stream")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Item")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("poll_next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pin")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            cx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[t._v("'_")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Poll")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Option")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("StreamExt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stream")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Option")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Unpin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// other methods...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("注意：我们之前在本章中使用的实际定义与此略有不同，因为它支持尚不支持在特性中使用异步函数的 Rust 版本。\n因此，它看起来像这样：")])]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Next")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[t._v("'_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Unpin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("那个 "),s("code",[t._v("Next")]),t._v(" 类型是一个实现了 "),s("code",[t._v("Future")]),t._v(" 的结构体，它允许我们使用 "),s("code",[t._v("Next<'_, Self>")]),t._v(" 来命名 "),s("code",[t._v("self")]),t._v(" 引用的生命周期，以便 "),s("code",[t._v("await")]),t._v(" 可以与此方法一起使用。")])]),t._v(" "),s("p",[s("code",[t._v("StreamExt")]),t._v(" 特性也是可用于流的所有有趣方法的所在地。"),s("code",[t._v("StreamExt")]),t._v(" 会自动为每个实现 "),s("code",[t._v("Stream")]),t._v(" 的类型实现，但这些特性是分开定义的，以便社区可以在不影响基础特性的情况下迭代便利 API。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("trpl")]),t._v(" crate 中使用的 "),s("code",[t._v("StreamExt")]),t._v(" 版本中，该特性不仅定义了 "),s("code",[t._v("next")]),t._v(" 方法，还提供了一个 "),s("code",[t._v("next")]),t._v(" 的默认实现，该实现正确处理了调用 "),s("code",[t._v("Stream::poll_next")]),t._v(" 的细节。这意味着即使你需要编写自己的流数据类型，你也只需要实现 "),s("code",[t._v("Stream")]),t._v("，然后任何使用你的数据类型的人都可以自动使用 "),s("code",[t._v("StreamExt")]),t._v(" 及其方法。")]),t._v(" "),s("p",[t._v("这就是我们将要介绍的这些特性的底层细节。最后，让我们考虑 "),s("code",[t._v("future")]),t._v("（包括流）、任务和线程如何协同工作！")])])}),[],!1,null,null,null);s.default=e.exports}}]);