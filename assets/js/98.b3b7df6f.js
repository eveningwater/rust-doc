(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{456:function(s,t,a){"use strict";a.r(t);var e=a(18),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"_1-option-枚举的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-option-枚举的定义"}},[s._v("#")]),s._v(" 1. "),t("strong",[s._v("Option"),t("T",[s._v(" 枚举的定义")])],1),s._v(":")]),s._v(" "),t("p",[t("code",[s._v("Option<T>")]),s._v(" 是 Rust 标准库中非常常见且重要的一个枚举，它用于表示可能存在的值。它有两个变体：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("None")]),s._v("：表示没有值。")]),s._v(" "),t("li",[t("code",[s._v("Some(T)")]),s._v("：表示有一个类型为 "),t("code",[s._v("T")]),s._v(" 的值。")])]),s._v(" "),t("p",[s._v("这个枚举类型的定义如下：")]),s._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Option")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("None")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("其中，"),t("code",[s._v("T")]),s._v(" 是一个泛型类型，可以是任何类型。"),t("code",[s._v("Option")]),s._v(" 枚举使得函数能够返回一个值或者没有值，从而避免了使用 "),t("code",[s._v("null")]),s._v(" 或 "),t("code",[s._v("undefined")]),s._v(" 的问题。")]),s._v(" "),t("h3",{attrs:{id:"_2-option-在-prelude-中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-option-在-prelude-中"}},[s._v("#")]),s._v(" 2. "),t("strong",[s._v("Option 在 Prelude 中")]),s._v(":")]),s._v(" "),t("p",[s._v("Rust 的 "),t("strong",[s._v("prelude")]),s._v("（预导入模块）是一个自动导入的模块集合，包含了许多常用的类型和函数，目的是让开发者在写代码时不需要每次都显式导入常用的工具和类型。")]),s._v(" "),t("p",[s._v("这段描述指出，"),t("code",[s._v("Option<T>")]),s._v(" 枚举非常常用，因此它和它的变体（"),t("code",[s._v("Some")]),s._v(" 和 "),t("code",[s._v("None")]),s._v("）已经包含在了 Rust 的预导入模块中。也就是说，当你写 Rust 程序时，不需要显式地 "),t("code",[s._v("use Option;")]),s._v(" 或 "),t("code",[s._v("use Option::*;")]),s._v(" 来导入它们。你可以直接使用 "),t("code",[s._v("Option")]),s._v(", "),t("code",[s._v("Some")]),s._v(", 和 "),t("code",[s._v("None")]),s._v("。")]),s._v(" "),t("p",[s._v("例如：")]),s._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Option")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Option")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("None")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("这里不需要显式地导入 "),t("code",[s._v("Option")]),s._v(" 或它的变体，因为它们已经在预导入模块中。")]),s._v(" "),t("h3",{attrs:{id:"_3-option-是常规的枚举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-option-是常规的枚举"}},[s._v("#")]),s._v(" 3. "),t("strong",[s._v("Option"),t("T",[s._v(" 是常规的枚举")])],1),s._v(":")]),s._v(" "),t("p",[s._v("尽管 "),t("code",[s._v("Option<T>")]),s._v(" 枚举非常常见并且常用于处理可选值，但它仍然是一个普通的 Rust 枚举。这意味着它遵循所有普通枚举的规则。具体来说：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Some(T)")]),s._v(" 和 "),t("code",[s._v("None")]),s._v(" 是 "),t("code",[s._v("Option<T>")]),s._v(" 枚举的两个变体，"),t("code",[s._v("Some(T)")]),s._v(" 是一个包含泛型类型 "),t("code",[s._v("T")]),s._v(" 的值的变体，而 "),t("code",[s._v("None")]),s._v(" 是一个空的变体。")]),s._v(" "),t("li",[s._v("它们依然是 "),t("code",[s._v("Option<T>")]),s._v(" 类型的变体。例如，"),t("code",[s._v("Some(5)")]),s._v(" 是 "),t("code",[s._v("Option<i32>")]),s._v(" 类型的一个值。")])]),s._v(" "),t("p",[s._v("这意味着你可以像使用任何普通的枚举一样使用 "),t("code",[s._v("Option<T>")]),s._v("，例如：")]),s._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Option")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("None")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" option"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Option")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Option")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" another_option"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Option")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Option")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("None")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("这里，"),t("code",[s._v("Some(10)")]),s._v(" 和 "),t("code",[s._v("None")]),s._v(" 都是 "),t("code",[s._v("Option<i32>")]),s._v(" 类型的值，"),t("code",[s._v("Some(10)")]),s._v(" 表示 "),t("code",[s._v("Option<i32>")]),s._v(" 中包含一个整数 "),t("code",[s._v("10")]),s._v("，而 "),t("code",[s._v("None")]),s._v(" 表示没有值。")]),s._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结：")]),s._v(" "),t("ul",[t("li",[t("strong",[t("code",[s._v("Option<T>")])]),s._v(" 是 Rust 中表示可选值的枚举类型，拥有两个变体："),t("code",[s._v("None")]),s._v(" 和 "),t("code",[s._v("Some(T)")]),s._v("。")]),s._v(" "),t("li",[s._v("它非常常用，因此被包含在 Rust 的 "),t("strong",[s._v("prelude")]),s._v(" 中，意味着你无需显式地导入 "),t("code",[s._v("Option")]),s._v(" 或它的变体（"),t("code",[s._v("Some")]),s._v(" 和 "),t("code",[s._v("None")]),s._v("）。")]),s._v(" "),t("li",[s._v("尽管它很常用，"),t("code",[s._v("Option<T>")]),s._v(" 仍然是一个普通的枚举类型，"),t("code",[s._v("Some(T)")]),s._v(" 和 "),t("code",[s._v("None")]),s._v(" 只是 "),t("code",[s._v("Option<T>")]),s._v(" 的变体，可以像普通枚举一样使用。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);