(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{391:function(t,s,i){"use strict";i.r(s);var n=i(17),r=Object(n.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"使用结构体来构造相关数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用结构体来构造相关数据"}},[this._v("#")]),this._v(" 使用结构体来构造相关数据")]),this._v(" "),t("p",[this._v("结构体或结构体是一种自定义数据类型，可让你将多个相关值打包在一起并命名，从而组成一个有意义的组。如果你熟悉面向对象语言，那么结构体就像对象的数据属性。在本章中，我们将比较和对比元组和结构体，以在你已知的知识的基础上进行构建，并演示结构体何时是分组数据的更好方法。")]),this._v(" "),t("p",[this._v("我们将演示如何定义和实例化结构体。我们将讨论如何定义关联函数，尤其是称为方法的关联函数，以指定与结构体类型相关的行为。结构体和枚举（第 6 章讨论）是程序域中创建新类型的构建块，以充分利用 Rust 的编译时类型检查。")])])}),[],!1,null,null,null);s.default=r.exports}}]);