(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{433:function(t,s,v){"use strict";v.r(s);var _=v(18),l=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"函数式语言特性-迭代器与闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数式语言特性-迭代器与闭包"}},[t._v("#")]),t._v(" 函数式语言特性：迭代器与闭包")]),t._v(" "),s("p",[t._v("Rust 的设计借鉴了许多现有语言和技术，其中一个重要的影响是函数式编程。函数式风格的编程通常包括将函数作为值来使用，例如将它们作为参数传递、从其他函数返回、赋值给变量以便稍后执行等等。")]),t._v(" "),s("p",[t._v("在本章中，我们不会争论什么是函数式编程或不是什么，而是讨论 Rust 中一些与许多通常被称为函数式语言的特性相似的特性。")]),t._v(" "),s("p",[t._v("更具体地说，我们将涵盖：")]),t._v(" "),s("ul",[s("li",[t._v("闭包，一种可以存储在变量中的类似函数的构造")]),t._v(" "),s("li",[t._v("迭代器，一种处理一系列元素的方式")]),t._v(" "),s("li",[t._v("如何使用闭包和迭代器改进第 12 章中的 I/O 项目")]),t._v(" "),s("li",[t._v("闭包和迭代器的性能（剧透：它们可能比你想象的要快！）")])]),t._v(" "),s("p",[t._v("我们已经介绍了一些其他受函数式风格影响的 Rust 特性，例如模式匹配和枚举。由于掌握闭包和迭代器是编写惯用、快速的 Rust 代码的重要部分，我们将把整个章节专门讨论它们。")])])}),[],!1,null,null,null);s.default=l.exports}}]);