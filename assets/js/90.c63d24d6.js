(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{446:function(r,t,a){"use strict";a.r(t);var e=a(18),o=Object(e.a)({},(function(){var r=this,t=r._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h2",{attrs:{id:"使用自定义命令扩展-cargo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用自定义命令扩展-cargo"}},[r._v("#")]),r._v(" 使用自定义命令扩展 Cargo")]),r._v(" "),t("p",[r._v("Cargo 的设计使你可以通过新的子命令扩展它，而无需修改它本身。如果你的 "),t("code",[r._v("$PATH")]),r._v(" 中有一个名为 "),t("code",[r._v("cargo-something")]),r._v(" 的二进制文件，你可以通过运行 "),t("code",[r._v("cargo something")]),r._v(" 来使用它，就像它是 Cargo 的子命令一样。这样的自定义命令在你运行 "),t("code",[r._v("cargo --list")]),r._v(" 时也会被列出。能够使用 "),t("code",[r._v("cargo install")]),r._v(" 安装扩展，然后像使用内置 Cargo 工具一样运行它们，这是 Cargo 设计的一个超级便利的好处！")]),r._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[r._v("#")]),r._v(" 总结")]),r._v(" "),t("p",[r._v("通过 Cargo 和 "),t("a",{attrs:{href:"https://crates.io/",target:"_blank",rel:"noopener noreferrer"}},[r._v("crates.io"),t("OutboundLink")],1),r._v(" 共享代码是使 Rust 生态系统对许多不同任务有用的部分原因。Rust 的标准库小而稳定，但 crate 很容易共享、使用，并且可以按照与语言不同的时间表进行改进。不要羞于在 "),t("a",{attrs:{href:"https://crates.io/",target:"_blank",rel:"noopener noreferrer"}},[r._v("crates.io"),t("OutboundLink")],1),r._v(" 上分享对你有用的代码；它很可能对其他人也有用！")])])}),[],!1,null,null,null);t.default=o.exports}}]);