(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{397:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"将错误消息写入标准错误而不是标准输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将错误消息写入标准错误而不是标准输出"}},[t._v("#")]),t._v(" 将错误消息写入标准错误而不是标准输出")]),t._v(" "),s("p",[t._v("目前，我们使用 "),s("code",[t._v("println!")]),t._v(" 宏将所有输出写入终端。在大多数终端中，有两种输出：标准输出 ("),s("code",[t._v("stdout")]),t._v(") 用于一般信息，标准错误 ("),s("code",[t._v("stderr")]),t._v(") 用于错误消息。这种区别使用户可以选择将程序的成功输出定向到文件，但仍将错误消息打印到屏幕上。")]),t._v(" "),s("p",[s("code",[t._v("println!")]),t._v(" 宏只能打印到标准输出，因此我们必须使用其他方法打印到标准错误。")]),t._v(" "),s("h3",{attrs:{id:"检查错误写入位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查错误写入位置"}},[t._v("#")]),t._v(" 检查错误写入位置")]),t._v(" "),s("p",[t._v("首先，让我们观察 "),s("code",[t._v("minigrep")]),t._v(" 打印的内容目前是如何写入标准输出的，包括我们想要写入标准错误的任何错误消息。我们将通过将标准输出流重定向到文件来故意引起错误。我们不会重定向标准错误流，因此发送到标准错误的任何内容将继续显示在屏幕上。")]),t._v(" "),s("p",[t._v("命令行程序应将错误消息发送到标准错误流，这样即使我们将标准输出流重定向到文件，我们仍然可以在屏幕上看到错误消息。我们的程序目前表现不佳：我们将看到它将错误消息输出保存到文件中！")]),t._v(" "),s("p",[t._v("为了演示这种行为，我们将运行程序，使用 > 和文件路径 output.txt，我们将标准输出流重定向到该文件。我们不会传递任何参数，这应该会导致错误：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[t._v("$ cargo run "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("txt\n")])])]),s("p",[s("code",[t._v(">")]),t._v(" 语法告诉 shell 将标准输出的内容写入 output.txt 而不是屏幕。我们没有看到预期的错误消息打印到屏幕上，这意味着它一定最终进入了文件。output.txt 的内容如下：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Problem")]),t._v(" parsing arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" not enough arguments\n")])])]),s("p",[t._v("是的，我们的错误消息正在打印到标准输出。将这样的错误消息打印到标准错误更有用，这样只有成功运行的数据才会最终进入文件。我们将改变这一点。")]),t._v(" "),s("h3",{attrs:{id:"将错误打印到标准错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将错误打印到标准错误"}},[t._v("#")]),t._v(" 将错误打印到标准错误")]),t._v(" "),s("p",[t._v("我们将使用示例 12-24 中的代码来改变错误消息的打印方式。由于我们在本章前面进行的重构，所有打印错误消息的代码都在一个函数 "),s("code",[t._v("main")]),t._v(" 中。标准库提供了 "),s("code",[t._v("eprintln!")]),t._v(" 宏，该宏打印到标准错误流，因此让我们将我们调用 "),s("code",[t._v("println!")]),t._v(" 打印错误的两处更改为使用 "),s("code",[t._v("eprintln!")]),t._v("。")]),t._v(" "),s("p",[t._v("文件名：src/main.rs：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("minigrep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vec")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("args")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("collect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap_or_else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token closure-params"}},[s("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("eprintln!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Problem parsing arguments: {err}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("minigrep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("eprintln!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Application error: {e}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("示例 12-24：使用 "),s("code",[t._v("eprintln!")]),t._v(" 将错误消息写入标准错误而不是标准输出")]),t._v(" "),s("p",[t._v("现在让我们以相同的方式再次运行程序，不带任何参数并将标准输出重定向到 "),s("code",[t._v(">")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[t._v("$ cargo run "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("txt\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Problem")]),t._v(" parsing arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" not enough arguments\n")])])]),s("p",[t._v("现在我们在屏幕上看到错误，并且 output.txt 不包含任何内容，这是我们期望命令行程序的行为。")]),t._v(" "),s("p",[t._v("让我们再次运行程序，带上不会导致错误的参数，但仍将标准输出重定向到文件，如下所示：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[t._v("$ cargo run "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" to poem"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("txt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("txt\n")])])]),s("p",[t._v("我们不会在终端上看到任何输出，并且 output.txt 将包含我们的结果：")]),t._v(" "),s("p",[t._v("文件名：output.txt：")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Are")]),t._v(" you nobody"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" too"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("How")]),t._v(" dreary to be "),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("somebody!")]),t._v("\n")])])]),s("p",[t._v("这表明我们现在正在适当地使用标准输出进行成功输出，使用标准错误进行错误输出。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("本章回顾了你迄今为止学到的一些主要概念，并介绍了如何在 Rust 中执行常见的 I/O 操作。通过使用命令行参数、文件、环境变量和用于打印错误的 "),s("code",[t._v("eprintln!")]),t._v(" 宏，你现在已准备好编写命令行应用程序。结合前几章的概念，你的代码将组织良好，有效地将数据存储在适当的数据结构中，很好地处理错误，并且经过充分测试。")]),t._v(" "),s("p",[t._v("接下来，我们将探讨一些受函数式语言影响的 Rust 特性：闭包和迭代器。")])])}),[],!1,null,null,null);s.default=e.exports}}]);