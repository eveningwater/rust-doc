(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{356:function(s,t,a){s.exports=a.p+"assets/img/trpl15-01.11c9f8e4.svg"},357:function(s,t,a){s.exports=a.p+"assets/img/trpl15-02.88a393b1.svg"},440:function(s,t,a){"use strict";a.r(t);var n=a(18),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"使用-box-t-指向堆上的数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-box-t-指向堆上的数据"}},[s._v("#")]),s._v(" 使用 "),t("code",[s._v("Box<T>")]),s._v(" 指向堆上的数据")]),s._v(" "),t("p",[s._v("最直接的智能指针是 box，其类型写作 "),t("code",[s._v("Box<T>")]),s._v("。Box 允许你将数据存储在堆上而不是栈上。留在栈上的则是指向堆数据的指针。请参考第 4 章来回顾栈和堆的区别。")]),s._v(" "),t("p",[s._v("Box 没有性能开销，除了将数据存储在堆上而不是栈上之外。但它们也没有很多额外的功能。你最常在如下场景中使用它们：")]),s._v(" "),t("ul",[t("li",[s._v("当你有一个在编译时无法知道大小的类型，而又想在需要确切大小的上下文中使用这个类型值的时候")]),s._v(" "),t("li",[s._v("当你有大量数据并希望在确保数据不被复制的情况下转移所有权的时候")]),s._v(" "),t("li",[s._v("当你希望拥有一个值并只关心它的类型是否实现了特定 trait 而不是其具体类型的时候")])]),s._v(" "),t("p",[s._v("我们将在 "),t("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8-box-%E5%AE%9E%E7%8E%B0%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B"}},[s._v('"使用 Box 实现递归类型"')]),s._v(" 中演示第一种情况。在第二种情况下，转移大量数据的所有权可能会花费很长时间，因为数据在栈上被复制。为了改善这种情况下的性能，我们可以将大量数据存储在堆上的 box 中。这样，只有少量的指针数据在栈上被复制，而它引用的数据则留在堆上的一个位置。第三种情况被称为 trait 对象，第 18 章的 "),t("a",{attrs:{href:"#"}},[s._v('"使用允许不同类型值的 Trait 对象"')]),s._v(" 专门讲述了这个主题。所以你在这里学到的内容将在那一节再次用到！")]),s._v(" "),t("h3",{attrs:{id:"使用-box-t-在堆上存储数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-box-t-在堆上存储数据"}},[s._v("#")]),s._v(" 使用 "),t("code",[s._v("Box<T>")]),s._v(" 在堆上存储数据")]),s._v(" "),t("p",[s._v("在讨论 "),t("code",[s._v("Box<T>")]),s._v(" 的堆存储用例之前，我们将介绍语法以及如何与存储在 "),t("code",[s._v("Box<T>")]),s._v(" 中的值交互。")]),s._v(" "),t("p",[s._v("示例 15-1 展示了如何使用 box 在堆上存储一个 "),t("code",[s._v("i32")]),s._v(" 值。")]),s._v(" "),t("p",[s._v("文件名：src/main.rs：")]),s._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b = {b}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("示例 15-1：使用 box 在堆上存储 "),t("code",[s._v("i32")]),s._v(" 值")]),s._v(" "),t("p",[s._v("我们定义变量 "),t("code",[s._v("b")]),s._v(" 的值为指向值 "),t("code",[s._v("5")]),s._v(" 的 "),t("code",[s._v("Box")]),s._v("，该值分配在堆上。这个程序会打印出 "),t("code",[s._v("b = 5")]),s._v("；在这种情况下，我们可以像访问栈上数据一样访问 box 中的数据。与任何拥有所有权的值一样，当 box 离开作用域时，如同 "),t("code",[s._v("b")]),s._v(" 在 "),t("code",[s._v("main")]),s._v(" 的末尾那样，它将被释放。释放过程既针对 box（存储在栈上）也针对它指向的数据（存储在堆上）。")]),s._v(" "),t("p",[s._v("将单个值放在堆上并不是很有用，所以你不会经常单独这样使用 box。在大多数情况下，像单个 "),t("code",[s._v("i32")]),s._v(" 这样的值放在栈上（默认存储方式）更为合适。让我们看一个 box 允许我们定义在没有 box 的情况下不允许的类型的情况。")]),s._v(" "),t("h3",{attrs:{id:"使用-box-实现递归类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-box-实现递归类型"}},[s._v("#")]),s._v(" 使用 Box 实现递归类型")]),s._v(" "),t("p",[s._v("递归类型的值可以拥有作为其自身一部分的相同类型的另一个值。递归类型会造成问题，因为 Rust 需要在编译时知道一个类型占用多少空间。然而，递归类型的值的嵌套理论上可以无限地继续，所以 Rust 无法知道值需要多少空间。由于 box 有已知的大小，我们可以通过在递归类型定义中插入 box 来启用递归类型。")]),s._v(" "),t("p",[s._v("作为递归类型的一个例子，让我们探索一下 cons 列表。这是一种在函数式编程语言中常见的数据类型。除了递归之外，我们将定义的 cons 列表类型很简单；因此，在处理涉及递归类型的更复杂情况时，我们将在示例中使用的概念会很有用。")]),s._v(" "),t("h4",{attrs:{id:"关于-cons-列表的更多信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于-cons-列表的更多信息"}},[s._v("#")]),s._v(" 关于 Cons 列表的更多信息")]),s._v(" "),t("p",[s._v("Cons 列表是来自 Lisp 编程语言及其方言的数据结构，由嵌套的对组成，是 Lisp 版本的链表。它的名称来自 Lisp 中的 "),t("code",[s._v("cons")]),s._v(" 函数（construct function 的缩写），该函数从其两个参数构造一个新的对。通过在由一个值和另一个对组成的对上调用 "),t("code",[s._v("cons")]),s._v("，我们可以构建由递归对组成的 cons 列表。")]),s._v(" "),t("p",[s._v("例如，这里是一个包含列表 "),t("code",[s._v("1, 2, 3")]),s._v(" 的 "),t("code",[s._v("cons")]),s._v(" 列表的伪代码表示，每个对用括号括起来：")]),s._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("Cons 列表中的每一项包含两个元素：当前项的值和下一项。列表中的最后一项只包含一个称为 "),t("code",[s._v("Nil")]),s._v(" 的值，没有下一项。Cons 列表通过递归调用 "),t("code",[s._v("cons")]),s._v(" 函数产生。递归的基本情况的规范名称是 "),t("code",[s._v("Nil")]),s._v('。请注意，这与第 6 章中讨论的 "null" 或 "nil" 概念不同，后者是无效或缺失的值。')]),s._v(" "),t("p",[s._v("Cons 列表在 Rust 中并不常用。大多数情况下，当你在 Rust 中有一个项目列表时，"),t("code",[s._v("Vec<T>")]),s._v(" 是更好的选择。其他更复杂的递归数据类型在各种情况下都很有用，但通过在本章开始时使用 cons 列表，我们可以探索 box 如何让我们定义递归数据类型，而不会有太多干扰。")]),s._v(" "),t("p",[s._v("示例 15-2 包含一个 cons 列表的枚举定义。请注意，这段代码还不能编译，因为 "),t("code",[s._v("List")]),s._v(" 类型没有已知的大小，我们将演示这一点。")]),s._v(" "),t("p",[s._v("文件名：src/main.rs：")]),s._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("List")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("示例 15-2：第一次尝试定义一个枚举来表示 "),t("code",[s._v("i32")]),s._v(" 值的 cons 列表数据结构")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：为了本例的目的，我们正在实现一个只持有 "),t("code",[s._v("i32")]),s._v(" 值的 cons 列表。我们可以使用泛型来实现它，正如我们在第 10 章中讨论的那样，定义一个可以存储任何类型值的 cons 列表类型。")])]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("List")]),s._v(" 类型存储列表 "),t("code",[s._v("1, 2, 3")]),s._v(" 将如示例 15-3 中的代码所示。")]),s._v(" "),t("p",[s._v("文件名：src/main.rs：")]),s._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("List")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("crate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" list "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("示例 15-3：使用 "),t("code",[s._v("List")]),s._v(" 枚举存储列表 "),t("code",[s._v("1, 2, 3")])]),s._v(" "),t("p",[s._v("第一个 "),t("code",[s._v("Cons")]),s._v(" 值持有 "),t("code",[s._v("1")]),s._v(" 和另一个 "),t("code",[s._v("List")]),s._v(" 值。这个 "),t("code",[s._v("List")]),s._v(" 值是另一个持有 "),t("code",[s._v("2")]),s._v(" 和另一个 "),t("code",[s._v("List")]),s._v(" 值的 "),t("code",[s._v("Cons")]),s._v(" 值。这个 "),t("code",[s._v("List")]),s._v(" 值是再一个持有 "),t("code",[s._v("3")]),s._v(" 和一个 "),t("code",[s._v("List")]),s._v(" 值的 "),t("code",[s._v("Cons")]),s._v(" 值，这个 "),t("code",[s._v("List")]),s._v(" 值最终是 "),t("code",[s._v("Nil")]),s._v("，表示列表结束的非递归变体。")]),s._v(" "),t("p",[s._v("如果我们尝试编译示例 15-3 中的代码，我们会得到示例 15-4 中显示的错误。")]),s._v(" "),t("p",[s._v("文件名：output.txt：")]),s._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[s._v("$ cargo run\n   "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Compiling")]),s._v(" cons"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("list v0"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("file"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//projects/cons-list)")]),s._v("\nerror"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E0072")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" recursive "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" `"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),s._v("` has infinite size\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("main"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("List")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token closure-params"}},[t("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" recursive without indirection\n  "),t("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")])]),s._v("\nhelp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" insert some "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("indirection")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("g"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a `"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),s._v("`"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" `"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Rc")]),s._v("`"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" or `"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("`"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" to "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v(" the cycle\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token closure-params"}},[t("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n\nerror"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E0391")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" cycle detected when computing when `"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),s._v("` needs drop\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("main"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("List")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("which immediately requires computing when `"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),s._v("` needs drop again\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" cycle used when computing whether `"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),s._v("` needs drop\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" see https"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("rustc"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("dev"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("guide"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rust"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("lang"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("overview"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("html#queries and https"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("rustc"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("dev"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("guide"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rust"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("lang"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("html "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" more information\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),s._v(" errors have detailed explanations"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E0072")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E0391")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("For")]),s._v(" more information about an error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" `rustc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("explain "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E0072")]),s._v("`"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\nerror"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" could not compile `cons"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("list` "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bin "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cons-list"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" due to "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" previous errors\n")])])]),t("p",[s._v("示例 15-4：尝试定义递归枚举时得到的错误")]),s._v(" "),t("p",[s._v('错误显示这个类型 "具有无限大小"。原因是我们定义了一个具有递归变体的 '),t("code",[s._v("List")]),s._v("：它直接持有自身的另一个值。因此，Rust 无法计算存储 "),t("code",[s._v("List")]),s._v(" 值需要多少空间。让我们分析一下为什么会得到这个错误。首先，我们来看看 Rust 如何决定需要多少空间来存储非递归类型的值。")]),s._v(" "),t("h4",{attrs:{id:"计算非递归类型的大小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算非递归类型的大小"}},[s._v("#")]),s._v(" 计算非递归类型的大小")]),s._v(" "),t("p",[s._v("回想一下我们在第 6 章讨论枚举定义时在示例 6-2 中定义的 "),t("code",[s._v("Message")]),s._v(" 枚举：")]),s._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Message")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Quit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Move")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Write")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChangeColor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("为了确定为 "),t("code",[s._v("Message")]),s._v(" 值分配多少空间，Rust 会检查每个变体，看哪个变体需要最多的空间。Rust 发现 "),t("code",[s._v("Message::Quit")]),s._v(" 不需要任何空间，"),t("code",[s._v("Message::Move")]),s._v(" 需要足够的空间来存储两个 "),t("code",[s._v("i32")]),s._v(" 值，依此类推。因为只会使用一个变体，所以 "),t("code",[s._v("Message")]),s._v(" 值需要的最大空间就是存储其最大变体所需的空间。")]),s._v(" "),t("p",[s._v("将此与 Rust 尝试确定递归类型（如示例 15-2 中的 "),t("code",[s._v("List")]),s._v(" 枚举）需要多少空间时发生的情况进行对比。编译器首先查看 "),t("code",[s._v("Cons")]),s._v(" 变体，它持有一个 "),t("code",[s._v("i32")]),s._v(" 类型的值和一个 "),t("code",[s._v("List")]),s._v(" 类型的值。因此，"),t("code",[s._v("Cons")]),s._v(" 需要的空间等于 "),t("code",[s._v("i32")]),s._v(" 的大小加上 "),t("code",[s._v("List")]),s._v(" 的大小。为了计算 "),t("code",[s._v("List")]),s._v(" 类型需要多少内存，编译器查看其变体，从 "),t("code",[s._v("Cons")]),s._v(" 变体开始。"),t("code",[s._v("Cons")]),s._v(" 变体持有一个 "),t("code",[s._v("i32")]),s._v(" 类型的值和一个 "),t("code",[s._v("List")]),s._v(" 类型的值，这个过程无限继续，如图 15-1 所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(356),alt:""}})]),s._v(" "),t("p",[s._v("图 15-1：由无限 "),t("code",[s._v("Cons")]),s._v(" 变体组成的无限 "),t("code",[s._v("List")])]),s._v(" "),t("h4",{attrs:{id:"使用-box-t-获得已知大小的递归类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-box-t-获得已知大小的递归类型"}},[s._v("#")]),s._v(" 使用 "),t("code",[s._v("Box<T>")]),s._v(" 获得已知大小的递归类型")]),s._v(" "),t("p",[s._v("因为 Rust 无法计算递归定义类型需要分配多少空间，编译器给出了一个带有这个有用建议的错误：")]),s._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[s._v("help"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" insert some "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("indirection")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("g"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a `"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),s._v("`"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" `"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Rc")]),s._v("`"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" or `"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("`"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" to "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v(" the cycle\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n")])])]),t("p",[s._v("在这个建议中，间接意味着我们不应该直接存储值，而应该通过存储指向值的指针来改变数据结构，从而间接存储值。")]),s._v(" "),t("p",[s._v("因为 "),t("code",[s._v("Box<T>")]),s._v(" 是一个指针，Rust 总是知道 "),t("code",[s._v("Box<T>")]),s._v(" 需要多少空间：指针的大小不会基于它指向的数据量而改变。这意味着我们可以在 "),t("code",[s._v("Cons")]),s._v(" 变体中放置一个 "),t("code",[s._v("Box<T>")]),s._v("，而不是直接放置另一个 "),t("code",[s._v("List")]),s._v(" 值。"),t("code",[s._v("Box<T>")]),s._v(" 将指向下一个 "),t("code",[s._v("List")]),s._v(" 值，该值将位于堆上，而不是 "),t("code",[s._v("Cons")]),s._v(" 变体内部。从概念上讲，我们仍然有一个列表，由持有其他列表的列表创建，但现在这个实现更像是将项目彼此相邻放置，而不是一个放在另一个内部。")]),s._v(" "),t("p",[s._v("我们可以将示例 15-2 中的 List 枚举定义和示例 15-3 中的 List 用法更改为示例 15-5 中的代码，这将可以编译。")]),s._v(" "),t("p",[s._v("文件名：src/main.rs：")]),s._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("List")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("crate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" list "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("示例 15-5：使用 "),t("code",[s._v("Box<T>")]),s._v(" 定义 "),t("code",[s._v("List")]),s._v(" 以获得已知大小")]),s._v(" "),t("p",[t("code",[s._v("Cons")]),s._v(" 变体需要 "),t("code",[s._v("i32")]),s._v(" 的大小加上存储 box 的指针数据的空间。"),t("code",[s._v("Nil")]),s._v(" 变体不存储任何值，所以它比 "),t("code",[s._v("Cons")]),s._v(" 变体需要更少的空间。现在我们知道任何 "),t("code",[s._v("List")]),s._v(" 值将占用 "),t("code",[s._v("i32")]),s._v(" 的大小加上 box 的指针数据的大小。通过使用 box，我们打破了无限递归链，因此编译器可以计算出存储 "),t("code",[s._v("List")]),s._v(" 值需要的大小。图 15-2 展示了 "),t("code",[s._v("Cons")]),s._v(" 变体现在的样子。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(357),alt:""}})]),s._v(" "),t("p",[s._v("图 15-2：不是无限大小的 "),t("code",[s._v("List")]),s._v("，因为 "),t("code",[s._v("Cons")]),s._v(" 持有一个 "),t("code",[s._v("Box")])]),s._v(" "),t("p",[s._v("Box 只提供了间接和堆分配；它们没有我们将在其他智能指针类型中看到的其他特殊功能。它们也没有这些特殊功能带来的性能开销，所以在像 cons 列表这样只需要间接功能的情况下，它们可能很有用。我们将在第 18 章中查看更多 box 的用例。")]),s._v(" "),t("p",[t("code",[s._v("Box<T>")]),s._v(" 类型是一个智能指针，因为它实现了 "),t("code",[s._v("Deref")]),s._v(" trait，允许 "),t("code",[s._v("Box<T>")]),s._v(" 值被视为引用。当 "),t("code",[s._v("Box<T>")]),s._v(" 值离开作用域时，由于 "),t("code",[s._v("Drop")]),s._v(" trait 的实现，box 指向的堆数据也会被清理。这两个 trait 对于我们将在本章剩余部分讨论的其他智能指针类型提供的功能更加重要。让我们更详细地探讨这两个 trait。")])])}),[],!1,null,null,null);t.default=e.exports}}]);