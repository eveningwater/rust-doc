import{_ as i,c as e,o as a,ag as l}from"./chunks/framework.CO45oJKY.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/more-about-cargo/release-profiles.md","filePath":"docs/more-about-cargo/release-profiles.md","lastUpdated":1754575581000}'),t={name:"docs/more-about-cargo/release-profiles.md"};function p(n,s,h,o,d,k){return a(),e("div",null,s[0]||(s[0]=[l(`<h2 id="使用发布配置文件自定义构建" tabindex="-1">使用发布配置文件自定义构建 <a class="header-anchor" href="#使用发布配置文件自定义构建" aria-label="Permalink to &quot;使用发布配置文件自定义构建&quot;">​</a></h2><p>在 Rust 中，发布配置文件是预定义的可自定义配置文件，具有不同的配置，允许程序员更好地控制各种代码编译选项。每个配置文件都独立于其他配置文件进行配置。</p><p>Cargo 有两个主要配置文件：运行 <code>cargo build</code> 时使用的 <code>dev</code> 配置文件和运行 <code>cargo build --release</code> 时使用的 <code>release</code> 配置文件。<code>dev</code> 配置文件定义了适合开发的良好默认值，而 <code>release</code> 配置文件定义了适合发布构建的良好默认值。</p><p>这些配置文件名称可能在你的构建输出中很熟悉：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cargo build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Finished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`dev\` profile [unoptimized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> debuginfo] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">00s</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cargo build </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">release</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Finished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`release\` profile [optimized] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">32s</span></span></code></pre></div><p><code>dev</code> 和 <code>release</code> 是编译器使用的不同配置文件。</p><p>当你未在项目的 Cargo.toml 文件中明确添加任何 <code>[profile.*]</code> 部分时，Cargo 会为每个配置文件应用默认设置。通过为要自定义的任何配置文件添加 <code>[profile.*]</code> 部分，你可以覆盖默认设置的任何子集。例如，以下是 <code>dev</code> 和 <code>release</code> 配置文件的 <code>opt-level</code> 设置的默认值：</p><p>Filename: Cargo.toml:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opt-level = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opt-level = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span></code></pre></div><p><code>opt-level</code> 设置控制 Rust 将应用于代码的优化级别，范围为 0 到 3。应用更多优化会延长编译时间，因此如果你正在开发并经常编译代码，你会希望减少优化以加快编译速度，即使生成的代码运行速度较慢。因此，<code>dev</code> 的默认 <code>opt-level</code> 为 <code>0</code>。当你准备发布代码时，最好花更多时间进行编译。你只需在发布模式下编译一次，但会多次运行编译后的程序，因此发布模式以更长的编译时间换取更快的代码运行速度。这就是 <code>release</code> 配置文件的默认 <code>opt-level</code> 为 <code>3</code> 的原因。</p><p>你可以通过在 Cargo.toml 中为其添加不同的值来覆盖默认设置。例如，如果要在开发配置文件中使用优化级别 1，可以将以下两行添加到项目的 Cargo.toml 文件中：</p><p>Filename: Cargo.toml:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opt-level = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><p>此代码覆盖了默认设置 <code>0</code>。现在，当我们运行 <code>cargo build</code> 时，Cargo 将使用 <code>dev</code> 配置文件的默认设置以及我们对 <code>opt-level</code> 的自定义设置。由于我们将 <code>opt-level</code> 设置为 <code>1</code>，Cargo 将应用比默认设置更多的优化，但不如发布构建中的优化多。</p><p>有关每个配置文件的完整配置选项和默认值列表，请参阅<a href="https://doc.rust-lang.org/cargo/reference/profiles.html" target="_blank" rel="noreferrer">Cargo 的文档</a>。</p>`,15)]))}const E=i(t,[["render",p]]);export{c as __pageData,E as default};
