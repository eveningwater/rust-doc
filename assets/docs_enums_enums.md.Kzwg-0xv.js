import{_ as t,c as s,o as n,j as e,a as o}from"./chunks/framework.CO45oJKY.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/enums/enums.md","filePath":"docs/enums/enums.md","lastUpdated":1754912302000}'),r={name:"docs/enums/enums.md"};function d(c,a,m,l,i,p){return n(),s("div",null,a[0]||(a[0]=[e("h2",{id:"枚举和模式匹配",tabindex:"-1"},[o("枚举和模式匹配 "),e("a",{class:"header-anchor",href:"#枚举和模式匹配","aria-label":'Permalink to "枚举和模式匹配"'},"​")],-1),e("p",null,"在本章中，我们将了解枚举。枚举允许你通过枚举其可能的变体来定义类型。首先，我们将定义并使用枚举来展示枚举如何编码含义和数据。接下来，我们将探索一个特别有用的枚举，称为 Option，它表示一个值可以是某物或什么都不是。然后，我们将了解 match 表达式中的模式匹配如何使针对枚举的不同值运行不同的代码变得容易。最后，我们将介绍 if let 构造如何成为另一种方便而简洁的惯用语来处理代码中的枚举。",-1)]))}const _=t(r,[["render",d]]);export{f as __pageData,_ as default};
